<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Masuit.Tools.Core</name>
    </assembly>
    <members>
        <member name="T:Masuit.Tools.AspNetCore.ResumeFileResults.Executor.ResumeFileContentResultExecutor">
            <summary>
            断点续传文件FileResult执行器
            </summary>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.ResumeFileResults.Executor.ResumeFileContentResultExecutor.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            构造函数
            </summary>
            <param name="loggerFactory"></param>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.ResumeFileResults.Executor.ResumeFileContentResultExecutor.ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext,Masuit.Tools.AspNetCore.ResumeFileResults.ResumeFileResult.ResumeFileContentResult)">
            <summary>
            执行Result
            </summary>
            <param name="context"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:Masuit.Tools.AspNetCore.ResumeFileResults.Executor.ResumeFileStreamResultExecutor">
            <summary>
            可断点续传的FileStreamResult执行器
            </summary>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.ResumeFileResults.Executor.ResumeFileStreamResultExecutor.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            构造函数
            </summary>
            <param name="loggerFactory"></param>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.ResumeFileResults.Executor.ResumeFileStreamResultExecutor.ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext,Masuit.Tools.AspNetCore.ResumeFileResults.ResumeFileResult.ResumeFileStreamResult)">
            <summary>
            执行Result
            </summary>
            <param name="context"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:Masuit.Tools.AspNetCore.ResumeFileResults.Executor.ResumePhysicalFileResultExecutor">
            <summary>
            通过本地文件的可断点续传的FileResult执行器
            </summary>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.ResumeFileResults.Executor.ResumePhysicalFileResultExecutor.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            构造函数
            </summary>
            <param name="loggerFactory"></param>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.ResumeFileResults.Executor.ResumePhysicalFileResultExecutor.ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext,Masuit.Tools.AspNetCore.ResumeFileResults.ResumeFileResult.ResumePhysicalFileResult)">
            <summary>
            执行Result
            </summary>
            <param name="context"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:Masuit.Tools.AspNetCore.ResumeFileResults.Executor.ResumeVirtualFileResultExecutor">
            <summary>
            使用本地虚拟路径的可断点续传的FileResult
            </summary>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.ResumeFileResults.Executor.ResumeVirtualFileResultExecutor.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            构造函数
            </summary>
            <param name="loggerFactory"></param>
            <param name="hostingEnvironment"></param>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.ResumeFileResults.Executor.ResumeVirtualFileResultExecutor.ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext,Masuit.Tools.AspNetCore.ResumeFileResults.ResumeFileResult.ResumeVirtualFileResult)">
            <summary>
            执行FileResult
            </summary>
            <param name="context"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:Masuit.Tools.AspNetCore.ResumeFileResults.Extensions.ActionContextExtension">
            <summary>
            ResumeFileHelper
            </summary>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.ResumeFileResults.Extensions.ActionContextExtension.SetContentDispositionHeaderInline(Microsoft.AspNetCore.Mvc.ActionContext,Masuit.Tools.AspNetCore.ResumeFileResults.ResumeFileResult.IResumeFileResult)">
            <summary>
            设置响应头ContentDispositionHeader
            </summary>
            <param name="context"></param>
            <param name="result"></param>
        </member>
        <member name="T:Masuit.Tools.AspNetCore.ResumeFileResults.Extensions.ControllerExtensions">
            <summary>
            Controller扩展方法
            </summary>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.ResumeFileResults.Extensions.ControllerExtensions.ResumeFile(Microsoft.AspNetCore.Mvc.ControllerBase,System.Byte[],System.String,System.String)">
            <summary>
            可断点续传和多线程下载的FileResult
            </summary>
            <param name="controller"></param>
            <param name="fileContents">文件二进制流</param>
            <param name="contentType">Content-Type</param>
            <param name="fileDownloadName">下载的文件名</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.ResumeFileResults.Extensions.ControllerExtensions.ResumeFile(Microsoft.AspNetCore.Mvc.ControllerBase,System.Byte[],System.String)">
            <summary>
            可断点续传和多线程下载的FileResult
            </summary>
            <param name="controller"></param>
            <param name="fileContents">文件二进制流</param>
            <param name="fileDownloadName">下载的文件名</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.ResumeFileResults.Extensions.ControllerExtensions.ResumeFile(Microsoft.AspNetCore.Mvc.ControllerBase,System.Byte[],System.String,System.String,System.String)">
            <summary>
            可断点续传和多线程下载的FileResult
            </summary>
            <param name="controller"></param>
            <param name="fileContents">文件二进制流</param>
            <param name="contentType">Content-Type</param>
            <param name="fileDownloadName">下载的文件名</param>
            <param name="etag">ETag</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.ResumeFileResults.Extensions.ControllerExtensions.ResumeFile(Microsoft.AspNetCore.Mvc.ControllerBase,System.IO.FileStream,System.String,System.String)">
            <summary>
            可断点续传和多线程下载的FileResult
            </summary>
            <param name="controller"></param>
            <param name="fileStream">文件二进制流</param>
            <param name="contentType">Content-Type</param>
            <param name="fileDownloadName">下载的文件名</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.ResumeFileResults.Extensions.ControllerExtensions.ResumeFile(Microsoft.AspNetCore.Mvc.ControllerBase,System.IO.FileStream,System.String)">
            <summary>
            可断点续传和多线程下载的FileResult
            </summary>
            <param name="controller"></param>
            <param name="fileStream">文件二进制流</param>
            <param name="fileDownloadName">下载的文件名</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.ResumeFileResults.Extensions.ControllerExtensions.ResumeFile(Microsoft.AspNetCore.Mvc.ControllerBase,System.IO.FileStream,System.String,System.String,System.String)">
            <summary>
            可断点续传和多线程下载的FileResult
            </summary>
            <param name="controller"></param>
            <param name="fileStream">文件二进制流</param>
            <param name="contentType">Content-Type</param>
            <param name="fileDownloadName">下载的文件名</param>
            <param name="etag">ETag</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.ResumeFileResults.Extensions.ControllerExtensions.ResumeFile(Microsoft.AspNetCore.Mvc.ControllerBase,System.String,System.String,System.String)">
            <summary>
            可断点续传和多线程下载的FileResult
            </summary>
            <param name="controller"></param>
            <param name="virtualPath">服务端本地文件的虚拟路径</param>
            <param name="contentType">Content-Type</param>
            <param name="fileDownloadName">下载的文件名</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.ResumeFileResults.Extensions.ControllerExtensions.ResumeFile(Microsoft.AspNetCore.Mvc.ControllerBase,System.String,System.String)">
            <summary>
            可断点续传和多线程下载的FileResult
            </summary>
            <param name="controller"></param>
            <param name="virtualPath">服务端本地文件的虚拟路径</param>
            <param name="fileDownloadName">下载的文件名</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.ResumeFileResults.Extensions.ControllerExtensions.ResumeFile(Microsoft.AspNetCore.Mvc.ControllerBase,System.String,System.String,System.String,System.String)">
            <summary>
            可断点续传和多线程下载的FileResult
            </summary>
            <param name="controller"></param>
            <param name="virtualPath">服务端本地文件的虚拟路径</param>
            <param name="contentType">Content-Type</param>
            <param name="fileDownloadName">下载的文件名</param>
            <param name="etag">ETag</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.ResumeFileResults.Extensions.ControllerExtensions.ResumePhysicalFile(Microsoft.AspNetCore.Mvc.ControllerBase,System.String,System.String,System.String)">
            <summary>
            可断点续传和多线程下载的FileResult
            </summary>
            <param name="controller"></param>
            <param name="physicalPath">服务端本地文件的物理路径</param>
            <param name="contentType">Content-Type</param>
            <param name="fileDownloadName">下载的文件名</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.ResumeFileResults.Extensions.ControllerExtensions.ResumePhysicalFile(Microsoft.AspNetCore.Mvc.ControllerBase,System.String,System.String)">
            <summary>
            可断点续传和多线程下载的FileResult
            </summary>
            <param name="controller"></param>
            <param name="physicalPath">服务端本地文件的物理路径</param>
            <param name="fileDownloadName">下载的文件名</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.ResumeFileResults.Extensions.ControllerExtensions.ResumePhysicalFile(Microsoft.AspNetCore.Mvc.ControllerBase,System.String,System.String,System.String,System.String)">
            <summary>
            可断点续传和多线程下载的FileResult
            </summary>
            <param name="controller"></param>
            <param name="physicalPath">服务端本地文件的物理路径</param>
            <param name="contentType">Content-Type</param>
            <param name="fileDownloadName">下载的文件名</param>
            <param name="etag">ETag</param>
            <returns></returns>
        </member>
        <member name="T:Masuit.Tools.AspNetCore.ResumeFileResults.ResumeFileResult.IResumeFileResult">
            <summary>
            可断点续传的FileResult
            </summary>
        </member>
        <member name="P:Masuit.Tools.AspNetCore.ResumeFileResults.ResumeFileResult.IResumeFileResult.FileDownloadName">
            <summary>
            文件下载名
            </summary>
        </member>
        <member name="P:Masuit.Tools.AspNetCore.ResumeFileResults.ResumeFileResult.IResumeFileResult.FileInlineName">
            <summary>
            给响应头的文件名
            </summary>
        </member>
        <member name="T:Masuit.Tools.AspNetCore.ResumeFileResults.ResumeFileResult.ResumeFileContentResult">
            <summary>
            基于Stream的ResumeFileContentResult
            </summary>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.ResumeFileResults.ResumeFileResult.ResumeFileContentResult.#ctor(System.Byte[],System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="fileContents">文件二进制流</param>
            <param name="contentType">Content-Type</param>
            <param name="etag">ETag</param>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.ResumeFileResults.ResumeFileResult.ResumeFileContentResult.#ctor(System.Byte[],Microsoft.Net.Http.Headers.MediaTypeHeaderValue,Microsoft.Net.Http.Headers.EntityTagHeaderValue)">
            <summary>
            构造函数
            </summary>
            <param name="fileContents">文件二进制流</param>
            <param name="contentType">Content-Type</param>
            <param name="etag">ETag</param>
        </member>
        <member name="P:Masuit.Tools.AspNetCore.ResumeFileResults.ResumeFileResult.ResumeFileContentResult.FileInlineName">
            <inheritdoc/>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.ResumeFileResults.ResumeFileResult.ResumeFileContentResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)">
            <inheritdoc/>
        </member>
        <member name="T:Masuit.Tools.AspNetCore.ResumeFileResults.ResumeFileResult.ResumeFileStreamResult">
            <summary>
            基于Stream的ResumeFileStreamResult
            </summary>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.ResumeFileResults.ResumeFileResult.ResumeFileStreamResult.#ctor(System.IO.FileStream,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="fileStream">文件流</param>
            <param name="contentType">Content-Type</param>
            <param name="etag">ETag</param>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.ResumeFileResults.ResumeFileResult.ResumeFileStreamResult.#ctor(System.IO.FileStream,Microsoft.Net.Http.Headers.MediaTypeHeaderValue,Microsoft.Net.Http.Headers.EntityTagHeaderValue)">
            <summary>
            构造函数
            </summary>
            <param name="fileStream">文件流</param>
            <param name="contentType">Content-Type</param>
            <param name="etag">ETag</param>
        </member>
        <member name="P:Masuit.Tools.AspNetCore.ResumeFileResults.ResumeFileResult.ResumeFileStreamResult.FileInlineName">
            <inheritdoc/>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.ResumeFileResults.ResumeFileResult.ResumeFileStreamResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)">
            <inheritdoc/>
        </member>
        <member name="T:Masuit.Tools.AspNetCore.ResumeFileResults.ResumeFileResult.ResumePhysicalFileResult">
            <summary>
            基于本地物理路径的ResumePhysicalFileResult
            </summary>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.ResumeFileResults.ResumeFileResult.ResumePhysicalFileResult.#ctor(System.String,System.String,System.String)">
            <summary>
            基于本地物理路径的ResumePhysicalFileResult
            </summary>
            <param name="fileName">文件全路径</param>
            <param name="contentType">Content-Type</param>
            <param name="etag">ETag</param>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.ResumeFileResults.ResumeFileResult.ResumePhysicalFileResult.#ctor(System.String,Microsoft.Net.Http.Headers.MediaTypeHeaderValue,Microsoft.Net.Http.Headers.EntityTagHeaderValue)">
            <summary>
            基于本地物理路径的ResumePhysicalFileResult
            </summary>
            <param name="fileName">文件全路径</param>
            <param name="contentType">Content-Type</param>
            <param name="etag">ETag</param>
        </member>
        <member name="P:Masuit.Tools.AspNetCore.ResumeFileResults.ResumeFileResult.ResumePhysicalFileResult.FileInlineName">
            <inheritdoc/>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.ResumeFileResults.ResumeFileResult.ResumePhysicalFileResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)">
            <inheritdoc/>
        </member>
        <member name="T:Masuit.Tools.AspNetCore.ResumeFileResults.ResumeFileResult.ResumeVirtualFileResult">
            <summary>
            基于服务器虚拟路径路径的ResumePhysicalFileResult
            </summary>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.ResumeFileResults.ResumeFileResult.ResumeVirtualFileResult.#ctor(System.String,System.String,System.String)">
            <summary>
            基于服务器虚拟路径路径的ResumePhysicalFileResult
            </summary>
            <param name="fileName">文件全路径</param>
            <param name="contentType">Content-Type</param>
            <param name="etag">ETag</param>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.ResumeFileResults.ResumeFileResult.ResumeVirtualFileResult.#ctor(System.String,Microsoft.Net.Http.Headers.MediaTypeHeaderValue,Microsoft.Net.Http.Headers.EntityTagHeaderValue)">
            <summary>
            基于服务器虚拟路径路径的ResumePhysicalFileResult
            </summary>
            <param name="fileName">文件全路径</param>
            <param name="contentType">Content-Type</param>
            <param name="etag">ETag</param>
        </member>
        <member name="P:Masuit.Tools.AspNetCore.ResumeFileResults.ResumeFileResult.ResumeVirtualFileResult.FileInlineName">
            <inheritdoc/>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.ResumeFileResults.ResumeFileResult.ResumeVirtualFileResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext)">
            <inheritdoc/>
        </member>
        <member name="T:Masuit.Tools.AspNetCore.Mime.ContentType">
            <summary>
            默认MIME映射器，可以根据文件扩展名获取标准内容类型。
            </summary>
        </member>
        <member name="F:Masuit.Tools.AspNetCore.Mime.ContentType.DefaultMime">
            <summary>
            默认Mime  - 如果没有找到任何其他映射则作为默认的Mime-Type
            </summary>
        </member>
        <member name="T:Masuit.Tools.AspNetCore.Mime.IMimeMapper">
            <summary>
            Mime
            </summary>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.Mime.IMimeMapper.Extend(Masuit.Tools.AspNetCore.Mime.MimeMappingItem[])">
            <summary>
            扩展Mime
            </summary>
            <param name="extensions"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.Mime.IMimeMapper.GetMimeFromExtension(System.String)">
            <summary>
            根据扩展名获取mime type
            </summary>
            <param name="fileExtension"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.Mime.IMimeMapper.GetMimeFromPath(System.String)">
            <summary>
            根据路径获取Mime Type
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="T:Masuit.Tools.AspNetCore.Mime.MimeMapper">
            <summary>
            默认MIME映射器，可以根据文件扩展名获取标准内容类型。
            </summary>
        </member>
        <member name="F:Masuit.Tools.AspNetCore.Mime.MimeMapper.DefaultMime">
            <summary>
            默认Mime  - 如果没有找到任何其他映射则作为默认的Mime-Type
            </summary>
        </member>
        <member name="F:Masuit.Tools.AspNetCore.Mime.MimeMapper._pathExtensionPattern">
            <summary>
            在文件路径中搜索文件扩展名的默认正则表达式
            </summary>
        </member>
        <member name="P:Masuit.Tools.AspNetCore.Mime.MimeMapper.MimeTypes">
            <summary>
            Mime类型的默认字典(Content types)
            </summary>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.Mime.MimeMapper.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.Mime.MimeMapper.#ctor(Masuit.Tools.AspNetCore.Mime.MimeMappingItem[])">
            <summary>
            
            </summary>
            <param name="extensions"></param>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.Mime.MimeMapper.Extend(Masuit.Tools.AspNetCore.Mime.MimeMappingItem[])">
            <summary>
            扩展mime映射规则的标准列表。扩展的具有更高的优先级 - 如果扩展具有与标准项相同的扩展名，则会覆盖默认的mime
            </summary>
            <param name="extensions"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.Mime.MimeMapper.GetMimeFromExtension(System.String)">
            <summary>
            返回特定文件扩展名的Content-Type，如果未找到任何对应关系，则返回默认值
            </summary>
            <param name="fileExtension"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.Mime.MimeMapper.GetMimeFromPath(System.String)">
            <summary>
            根据路径获取MimeType
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.AspNetCore.Mime.MimeMapper.GetExtension(System.String)">
            <summary>
            获取扩展名
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:Masuit.Tools.AspNetCore.Mime.MimeMappingItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:Masuit.Tools.AspNetCore.Mime.MimeMappingItem.Extension">
            <summary>
            扩展名
            </summary>
        </member>
        <member name="P:Masuit.Tools.AspNetCore.Mime.MimeMappingItem.MimeType">
            <summary>
            MimeType
            </summary>
        </member>
        <member name="T:Masuit.Tools.Core.AspNetCore.ServiceCollectionExtensions">
            <summary>
            依赖注入ServiceCollection容器扩展方法
            </summary>
        </member>
        <member name="M:Masuit.Tools.Core.AspNetCore.ServiceCollectionExtensions.AddResumeFileResult(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注入断点续传服务
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Core.AspNetCore.ServiceCollectionExtensions.AddSevenZipCompressor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注入7z压缩
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Core.AspNetCore.ServiceCollectionExtensions.AddStaticHttpContext(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注入HttpContext静态对象，方便在任意地方获取HttpContext，services.AddHttpContextAccessor();
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Masuit.Tools.Core.AspNetCore.ServiceCollectionExtensions.UseStaticHttpContext(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            注入HttpContext静态对象，方便在任意地方获取HttpContext，app.UseStaticHttpContext();
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="T:Masuit.Tools.Core.Config.CoreConfig">
            <summary>
            .net core的配置导入
            </summary>
        </member>
        <member name="P:Masuit.Tools.Core.Config.CoreConfig.Configuration">
            <summary>
            配置对象
            </summary>
        </member>
        <member name="T:Masuit.Tools.Core.Database.DataTableHelper">
            <summary>
            DataTable帮助类
            </summary>
        </member>
        <member name="M:Masuit.Tools.Core.Database.DataTableHelper.AddIdentityColumn(System.Data.DataTable)">
            <summary>
            给DataTable增加一个自增列
            如果DataTable 存在 identityid 字段  则 直接返回DataTable 不做任何处理
            </summary>
            <param name="dt">DataTable</param>
            <returns>返回Datatable 增加字段 identityid </returns>
            <exception cref="T:System.Data.DuplicateNameException">The collection already has a column with the specified name. (The comparison is not case-sensitive.) </exception>
        </member>
        <member name="M:Masuit.Tools.Core.Database.DataTableHelper.HasRows(System.Data.DataTable)">
            <summary>
            检查DataTable 是否有数据行
            </summary>
            <param name="dt">DataTable</param>
            <returns>是否有数据行</returns>
        </member>
        <member name="M:Masuit.Tools.Core.Database.DataTableHelper.ToList``1(System.Data.DataTable)">
            <summary>
            datatable转List
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Core.Database.DataTableHelper.ToDataTable``1(System.Collections.Generic.IList{``0})">
            <summary>
            将泛型集合类转换成DataTable
            </summary>
            <typeparam name="T">集合项类型</typeparam>
            <param name="list">集合</param>
            <returns>数据集(表)</returns>
        </member>
        <member name="M:Masuit.Tools.Core.Database.DataTableHelper.ToDataTable``1(System.Collections.Generic.IList{``0},System.String[])">
            <summary>
            将泛型集合类转换成DataTable
            </summary>
            <typeparam name="T">集合项类型</typeparam>
            <param name="list">集合</param>
            <param name="propertyName">需要返回的列的列名</param>
            <returns>数据集(表)</returns>
        </member>
        <member name="M:Masuit.Tools.Core.Database.DataTableHelper.CreateTable(System.Collections.Generic.List{System.String})">
            <summary>
            根据nameList里面的字段创建一个表格,返回该表格的DataTable
            </summary>
            <param name="nameList">包含字段信息的列表</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Masuit.Tools.Core.Database.DataTableHelper.CreateTable(System.Data.DataTable,System.String)">
            <summary>
            通过字符列表创建表字段，字段格式可以是：<br/>
            1) a,b,c,d,e<br/>
            2) a|int,b|string,c|bool,d|decimal<br/>
            </summary>
            <param name="dt"></param>
            <param name="nameString">字符列表</param>
            <returns>内存表</returns>
        </member>
        <member name="M:Masuit.Tools.Core.Database.DataTableHelper.ConvertType(System.String)">
            <summary>
            根据类型名返回一个Type类型
            </summary>
            <param name="typeName">类型的名称</param>
            <returns>Type对象</returns>
        </member>
        <member name="M:Masuit.Tools.Core.Database.DataTableHelper.GetDataRowArray(System.Data.DataRowCollection)">
            <summary>
            获得从DataRowCollection转换成的DataRow数组
            </summary>
            <param name="drc">DataRowCollection</param>
            <returns>DataRow数组</returns>
        </member>
        <member name="M:Masuit.Tools.Core.Database.DataTableHelper.GetTableFromRows(System.Data.DataRow[])">
            <summary>
            将DataRow数组转换成DataTable，注意行数组的每个元素须具有相同的数据结构，
            否则当有元素长度大于第一个元素时，抛出异常
            </summary>
            <param name="rows">行数组</param>
            <returns>将内存行组装成内存表</returns>
        </member>
        <member name="T:Masuit.Tools.Core.Linq.LinqExtension">
            <summary>
            linq扩展类
            </summary>
        </member>
        <member name="M:Masuit.Tools.Core.Linq.LinqExtension.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            与连接
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left">左条件</param>
            <param name="right">右条件</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Core.Linq.LinqExtension.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            或连接
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left">左条件</param>
            <param name="right">右条件</param>
            <returns></returns>
        </member>
        <member name="T:Masuit.Tools.Core.Linq.ParameterReplacer">
            <summary>
            linq参数替换器
            </summary>
        </member>
        <member name="M:Masuit.Tools.Core.Linq.ParameterReplacer.#ctor(System.Linq.Expressions.ParameterExpression)">
            <summary>
            linq参数替换器
            </summary>
            <param name="paramExpr"></param>
        </member>
        <member name="P:Masuit.Tools.Core.Linq.ParameterReplacer.ParameterExpression">
            <summary>
            参数表达式
            </summary>
        </member>
        <member name="M:Masuit.Tools.Core.Linq.ParameterReplacer.Replace(System.Linq.Expressions.Expression)">
            <summary>
            表达式替换
            </summary>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Core.Linq.ParameterReplacer.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            表达式参数访问
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="T:Masuit.Tools.Core.Net.CallContext`1">
            <summary>
            取线程内唯一对象
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Masuit.Tools.Core.Net.CallContext`1.SetData(System.String,`0)">
            <summary>
            设置值
            </summary>
            <param name="name"></param>
            <param name="data"></param>
        </member>
        <member name="M:Masuit.Tools.Core.Net.CallContext`1.GetData(System.String)">
            <summary>
            获取值
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Masuit.Tools.Core.Net.HttpContext2">
            <summary>
            实现类似于.NET Framework中的HttpContext静态对象，使用前需要在Startup中注入，ConfigureServices方法中：services.AddStaticHttpContext();，Configure方法中：app.UseStaticHttpContext();
            </summary>
        </member>
        <member name="P:Masuit.Tools.Core.Net.HttpContext2.Current">
            <summary>
            获取当前禽求上下文，使用前需要在Startup中注入，ConfigureServices方法中：services.AddStaticHttpContext();，Configure方法中：app.UseStaticHttpContext();
            </summary>
        </member>
        <member name="T:Masuit.Tools.Core.Net.WebExtension">
            <summary>
            Web操作扩展
            </summary>
        </member>
        <member name="M:Masuit.Tools.Core.Net.WebExtension.GetDbContext``1">
            <summary>
            获取线程内唯一的EF上下文对象，.NetCore中获取EF数据上下文对象，需要通过依赖注入的方式，请考虑在自己的项目中通过Masuit.Tools提供的CallContext对象实现获取线程内唯一的EF上下文对象，示例代码：
            <para>public static DataContext GetDbContext()</para>
            <para>{</para>
            <para>    DataContext db;</para>
            <para>    if (CallContext&lt;DataContext>.GetData("db") is null)</para>
            <para>    {</para>
            <para>        DbContextOptions&lt;DataContext> dbContextOption = new DbContextOptions&lt;DataContext>();</para>
            <para>        DbContextOptionsBuilder&lt;DataContext> dbContextOptionBuilder = new DbContextOptionsBuilder&lt;DataContext>(dbContextOption);</para>
            <para>        db = new DataContext(dbContextOptionBuilder.UseSqlServer(CommonHelper.ConnectionString).Options);</para>
            <para>        CallContext&lt;DataContext>.SetData("db", db);</para>
            <para>    }</para>
            <para>    db = CallContext&lt;DataContext>.GetData("db");</para>
            <para>    return db;</para>
            <para>}</para>
            </summary>
            <typeparam name="T">EF上下文容器对象</typeparam>
            <returns>EF上下文容器对象</returns>
        </member>
        <member name="M:Masuit.Tools.Core.Net.WebExtension.GetIPAddressInfo(System.String)">
            <summary>
            根据IP地址获取详细地理信息
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Core.Net.WebExtension.GetPhysicsAddressInfo(System.String)">
            <summary>
            根据IP地址获取详细地理信息对象
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Core.Net.WebExtension.GetISP(System.String)">
            <summary>
            根据IP地址获取ISP
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Core.Net.WebExtension.Set(Microsoft.AspNetCore.Http.ISession,System.String,System.Object)">
            <summary>
            写Session
            </summary>
            <param name="session"></param>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:Masuit.Tools.Core.Net.WebExtension.Get``1(Microsoft.AspNetCore.Http.ISession,System.String)">
            <summary>
            获取Session
            </summary>
            <typeparam name="T">对象</typeparam>
            <param name="session"></param>
            <param name="key">键</param>
            <returns>对象</returns>
        </member>
        <member name="T:Masuit.Tools.Core.Strings.PasswordGenerator">
            <summary>
            随机密码生成器
            </summary>
        </member>
        <member name="M:Masuit.Tools.Core.Strings.PasswordGenerator.Generate">
            <summary>
            生成密码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Core.Strings.PasswordGenerator.Generate(Masuit.Tools.Core.Strings.PasswordOptions)">
            <summary>
            生成密码
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:Masuit.Tools.Core.Strings.PasswordOptions">
            <summary>
            配置
            </summary>
        </member>
        <member name="P:Masuit.Tools.Core.Strings.PasswordOptions.Default">
            <summary>
            默认配置
            </summary>
        </member>
        <member name="M:Masuit.Tools.Core.Strings.PasswordOptions.#ctor(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            构造
            </summary>
            <param name="length">密码长度</param>
            <param name="hasNumber">是否包含数字</param>
            <param name="hasSymbol">是否包含符号</param>
        </member>
        <member name="P:Masuit.Tools.Core.Strings.PasswordOptions.Length">
            <summary>
            长度
            </summary>
        </member>
        <member name="P:Masuit.Tools.Core.Strings.PasswordOptions.HasNumber">
            <summary>
            是否包含数字
            </summary>
        </member>
        <member name="P:Masuit.Tools.Core.Strings.PasswordOptions.HasSymbol">
            <summary>
            是否包含符号
            </summary>
        </member>
        <member name="T:Masuit.Tools.Core.Validator.ComplexPassword">
            <summary>
            强密码验证
            </summary>
        </member>
        <member name="M:Masuit.Tools.Core.Validator.ComplexPassword.IsValid(System.Object)">
            <summary>
            校验密码强度
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Masuit.Tools.Core.Validator.IsEmailAttribute">
            <summary>
            邮箱校验
            </summary>
        </member>
        <member name="M:Masuit.Tools.Core.Validator.IsEmailAttribute.IsValid(System.Object)">
            <summary>
            邮箱校验
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Masuit.Tools.Core.Validator.IsIPAddressAttribute">
            <summary>
            验证IPv4地址是否合法
            </summary>
        </member>
        <member name="M:Masuit.Tools.Core.Validator.IsIPAddressAttribute.IsValid(System.Object)">
            <summary>
            验证IPv4地址是否合法
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Masuit.Tools.Core.Validator.IsPhoneAttribute">
            <summary>
            验证手机号码是否合法
            </summary>
        </member>
        <member name="M:Masuit.Tools.Core.Validator.IsPhoneAttribute.IsValid(System.Object)">
            <summary>
            验证手机号码是否合法
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Masuit.Tools.Core.Validator.MaxValueAttribute">
            <summary>
            最大值校验
            </summary>
        </member>
        <member name="M:Masuit.Tools.Core.Validator.MaxValueAttribute.#ctor(System.Double)">
            <summary>
            最大值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Masuit.Tools.Core.Validator.MaxValueAttribute.IsValid(System.Object)">
            <summary>
            最大值校验
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Core.Validator.MaxValueAttribute.FormatErrorMessage(System.String)">
            <summary>Applies formatting to an error message, based on the data field where the error occurred.</summary>
            <param name="name">The name to include in the formatted message.</param>
            <returns>An instance of the formatted error message.</returns>
        </member>
        <member name="T:Masuit.Tools.Core.Validator.MinValueAttribute">
            <summary>
            最小值校验
            </summary>
        </member>
        <member name="M:Masuit.Tools.Core.Validator.MinValueAttribute.#ctor(System.Double)">
            <summary>
            最小值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Masuit.Tools.Core.Validator.MinValueAttribute.IsValid(System.Object)">
            <summary>
            最小值校验
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Core.Validator.MinValueAttribute.FormatErrorMessage(System.String)">
            <summary>Applies formatting to an error message, based on the data field where the error occurred.</summary>
            <param name="name">The name to include in the formatted message.</param>
            <returns>An instance of the formatted error message.</returns>
        </member>
        <member name="T:Masuit.Tools.Database.DataExt">
            <summary>
            SqlDataReader扩展类
            </summary>
        </member>
        <member name="M:Masuit.Tools.Database.DataExt.MapEntity``1(System.Data.SqlClient.SqlDataReader)">
            <summary>
            根据SqlDataReader映射到实体模型
            </summary>
            <typeparam name="T">实体模型</typeparam>
            <param name="reader">SqlDataReader</param>
            <returns>映射后的实体模型</returns>
        </member>
        <member name="M:Masuit.Tools.Database.DataExt.MapEntity``1(System.Data.DataRow)">
            <summary>
            根据DataRow映射到实体模型
            </summary>
            <typeparam name="T">实体模型</typeparam>
            <param name="row">数据行</param>
            <returns>映射后的实体模型</returns>
        </member>
        <member name="M:Masuit.Tools.Database.DataExt.MapEntity``1(System.Data.IDataReader)">
            <summary>
            根据DataReader映射到实体模型
            </summary>
            <typeparam name="T">实体模型</typeparam>
            <param name="dr">IDataReader</param>
            <returns>映射后的实体模型</returns>
        </member>
        <member name="T:Masuit.Tools.DateTimeExt.ChineseCalendar">
            <summary>
            中国农历类 支持 1900.1.31日起至 2069.12.31日止的数据
            </summary>
            <remarks>
            本程序使用数据来源于网上的万年历查询，并综合了一些其它数据
            </remarks>
        </member>
        <member name="F:Masuit.Tools.DateTimeExt.ChineseCalendar._cIsLeapMonth">
            <summary>
            当月是否闰月
            </summary>
        </member>
        <member name="F:Masuit.Tools.DateTimeExt.ChineseCalendar._cIsLeapYear">
            <summary>
            当年是否有闰月
            </summary>
        </member>
        <member name="F:Masuit.Tools.DateTimeExt.ChineseCalendar.LunarDateArray">
             <summary>
             来源于网上的农历数据
             </summary>
             <remarks>
             数据结构如下，共使用17位数据
             第17位：表示闰月天数，0表示29天   1表示30天
             第16位-第5位（共12位）表示12个月，其中第16位表示第一月，如果该月为30天则为1，29天为0
             第4位-第1位（共4位）表示闰月是哪个月，如果当年没有闰月，则置0
            </remarks>
        </member>
        <member name="F:Masuit.Tools.DateTimeExt.ChineseCalendar.ConstellationName">
            <summary>
            星座
            </summary>
        </member>
        <member name="F:Masuit.Tools.DateTimeExt.ChineseCalendar.LunarHolidayName">
            <summary>
            二十四节气
            </summary>
        </member>
        <member name="F:Masuit.Tools.DateTimeExt.ChineseCalendar.ChineseConstellationName">
            <summary>
            二十八星宿
            </summary>
        </member>
        <member name="F:Masuit.Tools.DateTimeExt.ChineseCalendar.SolarTerm">
            <summary>
            节气数据
            </summary>
        </member>
        <member name="P:Masuit.Tools.DateTimeExt.ChineseCalendar.CustomWorkDays">
            <summary>
            自定义的工作日
            </summary>
        </member>
        <member name="P:Masuit.Tools.DateTimeExt.ChineseCalendar.CustomHolidays">
            <summary>
            自定义的节假日
            </summary>
        </member>
        <member name="P:Masuit.Tools.DateTimeExt.ChineseCalendar.SolarHolidayInfo">
            <summary>
            按公历计算的通用节假日
            </summary>
        </member>
        <member name="P:Masuit.Tools.DateTimeExt.ChineseCalendar.LunarHolidayInfo">
            <summary>
            按农历计算的通用节假日
            </summary>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.ChineseCalendar.#ctor(System.DateTime)">
            <summary>
            用一个标准的公历日期来初使化
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.ChineseCalendar.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            用农历的日期来初使化
            </summary>
            <param name="cy">农历年</param>
            <param name="cm">农历月</param>
            <param name="cd">农历日</param>
            <param name="leapMonthFlag">闰月标志</param>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.ChineseCalendar.GetChineseMonthDays(System.Int32,System.Int32)">
            <summary>
            传回农历 y年m月的总天数
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.ChineseCalendar.GetChineseLeapMonth(System.Int32)">
            <summary>
            传回农历 y年闰哪个月 1-12 , 没闰传回 0
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.ChineseCalendar.GetChineseLeapMonthDays(System.Int32)">
            <summary>
            传回农历 y年闰月的天数
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.ChineseCalendar.GetChineseYearDays(System.Int32)">
            <summary>
            取农历年一年的天数
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.ChineseCalendar.GetChineseHour(System.DateTime)">
            <summary>
            获得当前时间的时辰
            </summary>
            <param name="dt"></param>
            <returns></returns>
            
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.ChineseCalendar.CheckDateLimit(System.DateTime)">
            <summary>
            检查公历日期是否符合要求
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.ChineseCalendar.CheckChineseDateLimit(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            检查农历日期是否合理
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <param name="day"></param>
            <param name="leapMonth"></param>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.ChineseCalendar.ConvertNumToChineseNum(System.Char)">
            <summary>
            将0-9转成汉字形式
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.ChineseCalendar.BitTest32(System.Int32,System.Int32)">
            <summary>
            测试某位是否为真
            </summary>
            <param name="num"></param>
            <param name="bitpostion"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.ChineseCalendar.ConvertDayOfWeek(System.DayOfWeek)">
            <summary>
            将星期几转成数字表示
            </summary>
            <param name="dayOfWeek"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.ChineseCalendar.CompareWeekDayHoliday(System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            比较当天是不是指定的第周几
            </summary>
            <param name="date"></param>
            <param name="month"></param>
            <param name="week"></param>
            <param name="day"></param>
            <returns></returns>
        </member>
        <member name="P:Masuit.Tools.DateTimeExt.ChineseCalendar.ChineseCalendarHoliday">
            <summary>
            计算中国农历节日
            </summary>
        </member>
        <member name="P:Masuit.Tools.DateTimeExt.ChineseCalendar.WeekDayHoliday">
            <summary>
            按某月第几周第几日计算的节日
            </summary>
        </member>
        <member name="P:Masuit.Tools.DateTimeExt.ChineseCalendar.DateHoliday">
            <summary>
            按公历日计算的节日
            </summary>
        </member>
        <member name="P:Masuit.Tools.DateTimeExt.ChineseCalendar.IsHoliday">
            <summary>
            今天是否是假期
            </summary>
        </member>
        <member name="P:Masuit.Tools.DateTimeExt.ChineseCalendar.IsWorkDay">
            <summary>
            今天是否是工作日
            </summary>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.ChineseCalendar.IsWeekend">
            <summary>
            是否是周末
            </summary>
            <returns></returns>
        </member>
        <member name="P:Masuit.Tools.DateTimeExt.ChineseCalendar.Date">
            <summary>
            取对应的公历日期
            </summary>
        </member>
        <member name="P:Masuit.Tools.DateTimeExt.ChineseCalendar.WeekDay">
            <summary>
            取星期几
            </summary>
        </member>
        <member name="P:Masuit.Tools.DateTimeExt.ChineseCalendar.WeekDayStr">
            <summary>
            周几的字符
            </summary>
        </member>
        <member name="P:Masuit.Tools.DateTimeExt.ChineseCalendar.DateString">
            <summary>
            公历日期中文表示法 如一九九七年七月一日
            </summary>
        </member>
        <member name="P:Masuit.Tools.DateTimeExt.ChineseCalendar.IsLeapYear">
            <summary>
            当前是否公历闰年
            </summary>
        </member>
        <member name="P:Masuit.Tools.DateTimeExt.ChineseCalendar.ChineseConstellation">
            <summary>
            28星宿计算
            </summary>
        </member>
        <member name="P:Masuit.Tools.DateTimeExt.ChineseCalendar.ChineseHour">
            <summary>
            时辰
            </summary>
        </member>
        <member name="P:Masuit.Tools.DateTimeExt.ChineseCalendar.Today">
            <summary>
            农历今天
            </summary>
        </member>
        <member name="P:Masuit.Tools.DateTimeExt.ChineseCalendar.IsChineseLeapMonth">
            <summary>
            是否闰月
            </summary>
        </member>
        <member name="P:Masuit.Tools.DateTimeExt.ChineseCalendar.IsChineseLeapYear">
            <summary>
            当年是否有闰月
            </summary>
        </member>
        <member name="P:Masuit.Tools.DateTimeExt.ChineseCalendar.ChineseDay">
            <summary>
            农历日
            </summary>
        </member>
        <member name="P:Masuit.Tools.DateTimeExt.ChineseCalendar.ChineseDayString">
            <summary>
            农历日中文表示
            </summary>
        </member>
        <member name="P:Masuit.Tools.DateTimeExt.ChineseCalendar.ChineseMonth">
            <summary>
            农历的月份
            </summary>
        </member>
        <member name="P:Masuit.Tools.DateTimeExt.ChineseCalendar.ChineseMonthString">
            <summary>
            农历月份字符串
            </summary>
        </member>
        <member name="P:Masuit.Tools.DateTimeExt.ChineseCalendar.ChineseYear">
            <summary>
            取农历年份
            </summary>
        </member>
        <member name="P:Masuit.Tools.DateTimeExt.ChineseCalendar.ChineseYearString">
            <summary>
            取农历年字符串如，一九九七年
            </summary>
        </member>
        <member name="P:Masuit.Tools.DateTimeExt.ChineseCalendar.ChineseDateString">
            <summary>
            取农历日期表示法：农历一九九七年正月初五
            </summary>
        </member>
        <member name="P:Masuit.Tools.DateTimeExt.ChineseCalendar.ChineseTwentyFourDay">
            <summary>
            定气法计算二十四节气,二十四节气是按地球公转来计算的，并非是阴历计算的
            </summary>
            <remarks>
            节气的定法有两种。古代历法采用的称为"恒气"，即按时间把一年等分为24份，
            每一节气平均得15天有余，所以又称"平气"。现代农历采用的称为"定气"，即
            按地球在轨道上的位置为标准，一周360°，两节气之间相隔15°。由于冬至时地
            球位于近日点附近，运动速度较快，因而太阳在黄道上移动15°的时间不到15天。
            夏至前后的情况正好相反，太阳在黄道上移动较慢，一个节气达16天之多。采用
            定气时可以保证春、秋两分必然在昼夜平分的那两天。
            </remarks>
        </member>
        <member name="P:Masuit.Tools.DateTimeExt.ChineseCalendar.ChineseTwentyFourPrevDay">
            <summary>
            当前日期前一个最近节气
            </summary>
        </member>
        <member name="P:Masuit.Tools.DateTimeExt.ChineseCalendar.ChineseTwentyFourNextDay">
            <summary>
            当前日期后一个最近节气
            </summary>
        </member>
        <member name="P:Masuit.Tools.DateTimeExt.ChineseCalendar.Constellation">
            <summary>
            计算指定日期的星座序号 
            </summary>
            <returns></returns>
        </member>
        <member name="P:Masuit.Tools.DateTimeExt.ChineseCalendar.Animal">
            <summary>
            计算属相的索引，注意虽然属相是以农历年来区别的，但是目前在实际使用中是按公历来计算的
            鼠年为1,其它类推
            </summary>
        </member>
        <member name="P:Masuit.Tools.DateTimeExt.ChineseCalendar.AnimalString">
            <summary>
            取属相字符串
            </summary>
        </member>
        <member name="P:Masuit.Tools.DateTimeExt.ChineseCalendar.GanZhiYearString">
            <summary>
            取农历年的干支表示法如 乙丑年
            </summary>
        </member>
        <member name="P:Masuit.Tools.DateTimeExt.ChineseCalendar.GanZhiMonthString">
            <summary>
            取干支的月表示字符串，注意农历的闰月不记干支
            </summary>
        </member>
        <member name="P:Masuit.Tools.DateTimeExt.ChineseCalendar.GanZhiDayString">
            <summary>
            取干支日表示法
            </summary>
        </member>
        <member name="P:Masuit.Tools.DateTimeExt.ChineseCalendar.GanZhiDateString">
            <summary>
            取当前日期的干支表示法如 甲子年乙丑月丙庚日
            </summary>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.ChineseCalendar.NextDay">
            <summary>
            取下一天
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.ChineseCalendar.PervDay">
            <summary>
            取前一天
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.ChineseCalendar.AddDays(System.Int32)">
            <summary>
            取下n天
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.ChineseCalendar.AddWorkDays(System.Int32)">
            <summary>
            取下n天
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.ChineseCalendar.AddMonths(System.Int32)">
            <summary>
            加n月
            </summary>
            <returns></returns>
        </member>
        <member name="T:Masuit.Tools.DateTimeExt.DateInfoStruct">
            <summary>
            日期信息
            </summary>
        </member>
        <member name="F:Masuit.Tools.DateTimeExt.DateInfoStruct.Month">
            <summary>
            月
            </summary>
        </member>
        <member name="F:Masuit.Tools.DateTimeExt.DateInfoStruct.Day">
            <summary>
            日
            </summary>
        </member>
        <member name="F:Masuit.Tools.DateTimeExt.DateInfoStruct.Recess">
            <summary>
            假期长度
            </summary>
        </member>
        <member name="F:Masuit.Tools.DateTimeExt.DateInfoStruct.HolidayName">
            <summary>
            节假日名
            </summary>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.DateInfoStruct.#ctor(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            日期信息
            </summary>
            <param name="month"></param>
            <param name="day"></param>
            <param name="recess"></param>
            <param name="name"></param>
        </member>
        <member name="T:Masuit.Tools.DateTimeExt.DateTimeHelper">
            <summary>
            日期时间帮助类
            </summary>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.DateTimeHelper.GetWeekAmount(System.DateTime,System.Int32)">
            <summary>
            获取某一年有多少周
            </summary>
            <param name="_"></param>
            <param name="year">年份</param>
            <returns>该年周数</returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.DateTimeHelper.WeekOfYear(System.DateTime)">
            <summary>
            返回年度第几个星期   默认星期日是第一天
            </summary>
            <param name="date">时间</param>
            <returns>第几周</returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.DateTimeHelper.WeekOfYear(System.DateTime,System.DayOfWeek)">
            <summary>
            返回年度第几个星期
            </summary>
            <param name="date">时间</param>
            <param name="week">一周的开始日期</param>
            <returns>第几周</returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.DateTimeHelper.GetWeekTime(System.DateTime,System.Int32,System.Int32,System.DateTime@,System.DateTime@)">
            <summary>
            得到一年中的某周的起始日和截止日
            年 nYear
            周数 nNumWeek
            周始 out dtWeekStart
            周终 out dtWeekeEnd
            </summary>
            <param name="_"></param>
            <param name="nYear">年份</param>
            <param name="nNumWeek">第几周</param>
            <param name="dtWeekStart">开始日期</param>
            <param name="dtWeekeEnd">结束日期</param>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.DateTimeHelper.GetWeekWorkTime(System.DateTime,System.Int32,System.Int32,System.DateTime@,System.DateTime@)">
            <summary>
            得到一年中的某周的起始日和截止日    周一到周五  工作日
            </summary>
            <param name="_"></param>
            <param name="nYear">年份</param>
            <param name="nNumWeek">第几周</param>
            <param name="dtWeekStart">开始日期</param>
            <param name="dtWeekeEnd">结束日期</param>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.DateTimeHelper.SetLocalTime(System.DateTime)">
            <summary>
            设置本地计算机时间
            </summary>
            <param name="dt">DateTime对象</param>
        </member>
        <member name="T:Masuit.Tools.DateTimeExt.DateUtil">
            <summary>
            日期操作工具类
            </summary>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.DateUtil.GetDateTime(System.DateTime,System.Int32)">
            <summary>
            返回相对于当前时间的相对天数
            </summary>
            <param name="dt"></param>
            <param name="relativeday">相对天数</param>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.DateUtil.GetDateTimeF(System.DateTime)">
            <summary>
            返回标准时间格式string
            </summary>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.DateUtil.GetStandardDateTime(System.String,System.String)">
            <summary>
            返回标准时间 
            </summary>
            <param name="fDateTime">日期时间字符串</param>
            <param name="formatStr">格式</param>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.DateUtil.GetStandardDateTime(System.String)">
            <summary>
            返回标准时间 yyyy-MM-dd HH:mm:ss
            </summary>
            <param name="fDateTime">日期时间字符串</param>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.DateUtil.GetTotalSeconds(System.DateTime)">
            <summary>
            获取该时间相对于1970-01-01 00:00:00的秒数
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.DateUtil.GetTotalMilliseconds(System.DateTime)">
            <summary>
            获取该时间相对于1970-01-01 00:00:00的毫秒数
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.DateUtil.GetTotalMicroseconds(System.DateTime)">
            <summary>
            获取该时间相对于1970-01-01 00:00:00的微秒时间戳
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.DateUtil.GetTotalNanoseconds(System.DateTime)">
            <summary>
            获取该时间相对于1970-01-01 00:00:00的纳秒时间戳
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.DateUtil.GetTotalMinutes(System.DateTime)">
            <summary>
            获取该时间相对于1970-01-01 00:00:00的分钟数
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.DateUtil.GetTotalHours(System.DateTime)">
            <summary>
            获取该时间相对于1970-01-01 00:00:00的小时数
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.DateUtil.GetTotalDays(System.DateTime)">
            <summary>
            获取该时间相对于1970-01-01 00:00:00的天数
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.DateUtil.GetDaysOfYear(System.DateTime,System.Int32)">
            <summary>
            返回本年有多少天
            </summary>
            <param name="_"></param>
            <param name="iYear">年份</param>
            <returns>本年的天数</returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.DateUtil.GetDaysOfYear(System.DateTime)">
            <summary>本年有多少天</summary>
            <param name="dt">日期</param>
            <returns>本天在当年的天数</returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.DateUtil.GetDaysOfMonth(System.DateTime,System.Int32,System.Int32)">
            <summary>本月有多少天</summary>
            <param name="_"></param>
            <param name="iYear">年</param>
            <param name="month">月</param>
            <returns>天数</returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.DateUtil.GetDaysOfMonth(System.DateTime)">
            <summary>本月有多少天</summary>
            <param name="dt">日期</param>
            <returns>天数</returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.DateUtil.GetWeekNameOfDay(System.DateTime)">
            <summary>返回当前日期的星期名称</summary>
            <param name="idt">日期</param>
            <returns>星期名称</returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.DateUtil.GetWeekNumberOfDay(System.DateTime)">
            <summary>返回当前日期的星期编号</summary>
            <param name="idt">日期</param>
            <returns>星期数字编号</returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.DateUtil.IsRuYear(System.Int32)">
            <summary>判断当前年份是否是闰年，私有函数</summary>
            <param name="iYear">年份</param>
            <returns>是闰年：True ，不是闰年：False</returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.DateUtil.IsDateTime(System.String)">
            <summary>
            判断是否为合法日期，必须大于1800年1月1日
            </summary>
            <param name="strDate">输入日期字符串</param>
            <returns>True/False</returns>
        </member>
        <member name="T:Masuit.Tools.DateTimeExt.TimeHelper">
            <summary>
            时间相关操作帮助类
            </summary>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.TimeHelper.ReturnDateFormat(System.DateTime,System.Int32,System.String@,System.String@)">
            <summary>
             返回每月的第一天和最后一天
            </summary>
            <param name="_"></param>
            <param name="month">月份</param>
            <param name="firstDay">第一天</param>
            <param name="lastDay">最后一天</param>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.TimeHelper.GetFormatDate(System.DateTime,System.Char)">
            <summary>
            将时间格式化成 年月日 的形式,如果时间为null，返回当前系统时间
            </summary>
            <param name="dt">年月日分隔符</param>
            <param name="separator">分隔符</param>
            <returns>xxxx年xx月xx日</returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.TimeHelper.GetFormatTime(System.DateTime,System.Char)">
            <summary>
            将时间格式化成 时分秒 的形式,如果时间为null，返回当前系统时间
            </summary>
            <param name="dt">当前日期时间对象</param>
            <param name="separator">分隔符</param>
            <returns> xx时xx分xx秒 </returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.TimeHelper.SecondToMinute(System.DateTime,System.Int32)">
            <summary>
            把秒转换成分钟
            </summary>
            <param name="_"></param>
            <param name="second">秒数</param>
            <returns>分钟数</returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.TimeHelper.GetMonthLastDate(System.DateTime,System.Int32,System.Int32)">
            <summary>
            返回某年某月最后一天
            </summary>
            <param name="_"></param>
            <param name="year">年份</param>
            <param name="month">月份</param>
            <returns>日</returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.TimeHelper.DateDiff2(System.DateTime,System.DateTime)">
            <summary>
            获得两个日期的间隔
            </summary>
            <param name="dateTime1">日期一。</param>
            <param name="dateTime2">日期二。</param>
            <returns>日期间隔TimeSpan。</returns>
            <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />. </exception>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.TimeHelper.GetRandomTime(System.DateTime,System.DateTime)">
            <summary>
            得到随机日期
            </summary>
            <param name="time1">起始日期</param>
            <param name="time2">结束日期</param>
            <returns>间隔日期之间的 随机日期</returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.TimeHelper.DateConvert(System.String)">
            <summary> 
            Rss日期时间转换，将时间全部转换为GMT时间 
            </summary> 
            <param name="strDateTime">Rss中读取的时间</param> 
            <returns>处理后的标准时间格式</returns> 
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.TimeHelper.GetTimeDelay(System.DateTime,System.DateTime)">
            <summary>
            获得一段时间内有多少小时
            </summary>
            <param name="dtStar">起始时间</param>
            <param name="dtEnd">终止时间</param>
            <returns>小时差</returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.TimeHelper.GetDateString(System.DateTime)">
            <summary>
            获得8位时间整型数字
            </summary>
            <param name="dt">当前的日期时间对象</param>
            <returns>8位时间整型数字</returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.TimeHelper.DateDiff(System.DateTime,System.DateTime)">
            <summary>
            返回时间差
            </summary>
            <param name="dateTime1">时间1</param>
            <param name="dateTime2">时间2</param>
            <returns>时间差</returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.TimeHelper.GetDiffTime(System.DateTime,System.DateTime)">
            <summary>
            时间差
            </summary>
            <param name="beginTime">开始时间</param>
            <param name="endTime">结束时间</param>
            <returns>时间差</returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.TimeHelper.GetDiffTime(System.DateTime,System.DateTime,System.Int32@)">
            <summary>
            计算2个时间差
            </summary>
            <param name="beginTime">开始时间</param>
            <param name="endTime">结束时间</param>
            <param name="mindTime">中间的时间</param>
            <returns>时间差</returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.TimeHelper.CsharpTime2JavascriptTime(System.DateTime)">
            <summary>
            C#的时间到Javascript的时间的转换
            </summary>
            <param name="theDate">C#的时间</param>
            <returns>Javascript的时间</returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.TimeHelper.PhpTime2CsharpTime(System.DateTime,System.Int64)">
            <summary>
            PHP的时间转换成C#中的DateTime
            </summary>
            <param name="_"></param>
            <param name="time">php的时间</param>
            <returns>C#的时间</returns>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.TimeHelper.CsharpTime2PhpTime(System.DateTime)">
            <summary>
             C#中的DateTime转换成PHP的时间
            </summary>
            <param name="time">C#时间</param>
            <returns>php时间</returns>
        </member>
        <member name="T:Masuit.Tools.DateTimeExt.WeekHolidayStruct">
            <summary>
            节假日信息
            </summary>
        </member>
        <member name="F:Masuit.Tools.DateTimeExt.WeekHolidayStruct.Month">
            <summary>
            月
            </summary>
        </member>
        <member name="F:Masuit.Tools.DateTimeExt.WeekHolidayStruct.WeekAtMonth">
            <summary>
            这个月第几周
            </summary>
        </member>
        <member name="F:Masuit.Tools.DateTimeExt.WeekHolidayStruct.WeekDay">
            <summary>
            周末日
            </summary>
        </member>
        <member name="F:Masuit.Tools.DateTimeExt.WeekHolidayStruct.HolidayName">
            <summary>
            假日名
            </summary>
        </member>
        <member name="M:Masuit.Tools.DateTimeExt.WeekHolidayStruct.#ctor(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            节假日信息
            </summary>
            <param name="month"></param>
            <param name="weekAtMonth"></param>
            <param name="weekDay"></param>
            <param name="name"></param>
        </member>
        <member name="T:Masuit.Tools.Extensions">
            <summary>
            扩展方法
            </summary>
        </member>
        <member name="M:Masuit.Tools.Extensions.ForEach(System.Object[],System.Action{System.Object})">
            <summary>
            遍历数组
            </summary>
            <param name="objs"></param>
            <param name="action">回调方法</param>
        </member>
        <member name="M:Masuit.Tools.Extensions.ForEach(System.Collections.Generic.IEnumerable{System.Object},System.Action{System.Object})">
            <summary>
            遍历IEnumerable
            </summary>
            <param name="objs"></param>
            <param name="action">回调方法</param>
        </member>
        <member name="M:Masuit.Tools.Extensions.ForEach(System.Collections.Generic.IList{System.Object},System.Action{System.Object})">
            <summary>
            遍历集合
            </summary>
            <param name="objs"></param>
            <param name="action">回调方法</param>
        </member>
        <member name="M:Masuit.Tools.Extensions.ForEach``1(``0[],System.Action{``0})">
            <summary>
            遍历数组
            </summary>
            <param name="objs"></param>
            <param name="action">回调方法</param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Masuit.Tools.Extensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            遍历IEnumerable
            </summary>
            <param name="objs"></param>
            <param name="action">回调方法</param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Masuit.Tools.Extensions.ForEach``1(System.Collections.Generic.IList{``0},System.Action{``0})">
            <summary>
            遍历List
            </summary>
            <param name="objs"></param>
            <param name="action">回调方法</param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Masuit.Tools.Extensions.ForEach``1(System.Object[],System.Func{System.Object,``0})">
            <summary>
            遍历数组并返回一个新的List
            </summary>
            <param name="objs"></param>
            <param name="action">回调方法</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.ForEach``1(System.Collections.Generic.IEnumerable{System.Object},System.Func{System.Object,``0})">
            <summary>
            遍历IEnumerable并返回一个新的List
            </summary>
            <param name="objs"></param>
            <param name="action">回调方法</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.ForEach``1(System.Collections.Generic.IList{System.Object},System.Func{System.Object,``0})">
            <summary>
            遍历List并返回一个新的List
            </summary>
            <param name="objs"></param>
            <param name="action">回调方法</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.ForEach``1(``0[],System.Func{``0,``0})">
            <summary>
            遍历数组并返回一个新的List
            </summary>
            <param name="objs"></param>
            <param name="action">回调方法</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0})">
            <summary>
            遍历IEnumerable并返回一个新的List
            </summary>
            <param name="objs"></param>
            <param name="action">回调方法</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.ForEach``1(System.Collections.Generic.IList{``0},System.Func{``0,``0})">
            <summary>
            遍历List并返回一个新的List
            </summary>
            <param name="objs"></param>
            <param name="action">回调方法</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.ForEachAsync(System.Object[],System.Action{System.Object})">
            <summary>
            遍历数组
            </summary>
            <param name="objs"></param>
            <param name="action">回调方法</param>
        </member>
        <member name="M:Masuit.Tools.Extensions.ForEachAsync``1(``0[],System.Action{``0})">
            <summary>
            遍历数组
            </summary>
            <param name="objs"></param>
            <param name="action">回调方法</param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Masuit.Tools.Extensions.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            遍历IEnumerable
            </summary>
            <param name="objs"></param>
            <param name="action">回调方法</param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Masuit.Tools.Extensions.ForEachAsync``1(System.Collections.Generic.IList{``0},System.Action{``0})">
            <summary>
            遍历List
            </summary>
            <param name="objs"></param>
            <param name="action">回调方法</param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Masuit.Tools.Extensions.MapTo``1(System.Object)">
            <summary>
            映射到目标类型(浅克隆)
            </summary>
            <param name="source">源</param>
            <typeparam name="TDestination">目标类型</typeparam>
            <returns>目标类型</returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.MapToAsync``1(System.Object)">
            <summary>
            映射到目标类型(浅克隆)
            </summary>
            <param name="source">源</param>
            <typeparam name="TDestination">目标类型</typeparam>
            <returns>目标类型</returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.Map``1(System.Object)">
            <summary>
            映射到目标类型(深克隆)
            </summary>
            <param name="source">源</param>
            <typeparam name="TDestination">目标类型</typeparam>
            <returns>目标类型</returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.MapAsync``1(System.Object)">
            <summary>
            映射到目标类型(深克隆)
            </summary>
            <param name="source">源</param>
            <typeparam name="TDestination">目标类型</typeparam>
            <returns>目标类型</returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.Copy``1(``0)">
            <summary>
            复制一个新的对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.CopyTo``1(``0,``0)">
            <summary>
            复制到一个现有对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">源对象</param>
            <param name="dest">目标对象</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.CopyAsync``1(``0)">
            <summary>
            复制一个新的对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.ToList``1(System.Object[])">
            <summary>
            映射到目标类型的集合
            </summary>
            <param name="source">源</param>
            <typeparam name="TDestination">目标类型</typeparam>
            <returns>目标类型集合</returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.ToListAsync``1(System.Object[])">
            <summary>
            映射到目标类型的集合
            </summary>
            <param name="source">源</param>
            <typeparam name="TDestination">目标类型</typeparam>
            <returns>目标类型集合</returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.ToList``1(System.Collections.Generic.IList{System.Object})">
            <summary>
            映射到目标类型的集合
            </summary>
            <param name="source">源</param>
            <typeparam name="TDestination">目标类型</typeparam>
            <returns>目标类型集合</returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.ToListAsync``1(System.Collections.Generic.IList{System.Object})">
            <summary>
            映射到目标类型的集合
            </summary>
            <param name="source">源</param>
            <typeparam name="TDestination">目标类型</typeparam>
            <returns>目标类型集合</returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.ToList``1(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            映射到目标类型的集合
            </summary>
            <param name="source">源</param>
            <typeparam name="TDestination">目标类型</typeparam>
            <returns>目标类型集合</returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.ToListAsync``1(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            映射到目标类型的集合
            </summary>
            <param name="source">源</param>
            <typeparam name="TDestination">目标类型</typeparam>
            <returns>目标类型集合</returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.ToJsonString(System.Object)">
            <summary>
            转换成json字符串
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.ToJsonStringAsync(System.Object)">
            <summary>
            转换成json字符串
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.UbbToHtml(System.String)">
            <summary>
            UBB代码处理函数
            </summary>
            <param name="ubbStr">输入UBB字符串</param>
            <returns>输出html字符串</returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.UbbToHtmlAsync(System.String)">
            <summary>
            UBB代码处理函数
            </summary>
            <param name="ubbStr">输入UBB字符串</param>
            <returns>输出html字符串</returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.UbbToHtml2(System.String)">
            <summary>
            UBB转HTML方式2
            </summary>
            <param name="ubbStr">UBB 代码</param>
            <returns>HTML代码</returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.UbbToHtml2Async(System.String)">
            <summary>
            UBB转HTML方式2
            </summary>
            <param name="ubbStr">UBB 代码</param>
            <returns>HTML代码</returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.HtmltoUBB(System.String)">
            <summary>
            Html转UBB
            </summary>
            <param name="chr">HTML代码</param>
            <returns>UBB代码</returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.HtmltoUBBAsync(System.String)">
            <summary>
            Html转UBB
            </summary>
            <param name="chr">HTML代码</param>
            <returns>UBB代码</returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.ToInt32(System.String)">
            <summary>
            字符串转int
            </summary>
            <param name="s">源字符串</param>
            <returns>int类型的数字</returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.ToInt64(System.String)">
            <summary>
            字符串转long
            </summary>
            <param name="s">源字符串</param>
            <returns>int类型的数字</returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.ToDouble(System.String)">
            <summary>
            字符串转double
            </summary>
            <param name="s">源字符串</param>
            <returns>double类型的数据</returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.ToDecimal(System.String)">
            <summary>
            字符串转decimal
            </summary>
            <param name="s">源字符串</param>
            <returns>int类型的数字</returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.ToDecimal(System.Double)">
            <summary>
            字符串转decimal
            </summary>
            <param name="s">源字符串</param>
            <returns>int类型的数字</returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.ToDouble(System.Decimal)">
            <summary>
            字符串转double
            </summary>
            <param name="s">源字符串</param>
            <returns>double类型的数据</returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.ToInt32(System.Double)">
            <summary>
            将double转换成int
            </summary>
            <param name="num">double类型</param>
            <returns>int类型</returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.ToInt32(System.Decimal)">
            <summary>
            将double转换成int
            </summary>
            <param name="num">double类型</param>
            <returns>int类型</returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.ToDouble(System.Int32)">
            <summary>
            将int转换成double
            </summary>
            <param name="num">int类型</param>
            <returns>int类型</returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.ToDecimal(System.Int32)">
            <summary>
            将int转换成decimal
            </summary>
            <param name="num">int类型</param>
            <returns>int类型</returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.Contains(System.String,System.String[])">
            <summary>
            检测字符串中是否包含列表中的关键词
            </summary>
            <param name="s">源字符串</param>
            <param name="keys">关键词列表</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.MatchEmail(System.String,System.Boolean@)">
            <summary>
            匹配Email
            </summary>
            <param name="s">源字符串</param>
            <param name="isMatch">是否匹配成功，若返回true，则会得到一个Match对象，否则为null</param>
            <returns>匹配对象</returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.MatchEmail(System.String)">
            <summary>
            匹配Email
            </summary>
            <param name="s">源字符串</param>
            <returns>是否匹配成功</returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.MatchUrl(System.String,System.Boolean@)">
            <summary>
            匹配完整格式的URL
            </summary>
            <param name="s">源字符串</param>
            <param name="isMatch">是否匹配成功，若返回true，则会得到一个Match对象，否则为null</param>
            <returns>匹配对象</returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.MatchUrl(System.String)">
            <summary>
            匹配完整格式的URL
            </summary>
            <param name="s">源字符串</param>
            <returns>是否匹配成功</returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.MatchIdentifyCard(System.String)">
            <summary>
            根据GB11643-1999标准权威校验中国身份证号码的合法性
            </summary>
            <param name="s">源字符串</param>
            <returns>是否匹配成功</returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.MatchInetAddress(System.String,System.Boolean@)">
            <summary>
            校验IP地址的正确性，同时支持IPv4和IPv6
            </summary>
            <param name="s">源字符串</param>
            <param name="isMatch">是否匹配成功，若返回true，则会得到一个Match对象，否则为null</param>
            <returns>匹配对象</returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.MatchInetAddress(System.String)">
            <summary>
            校验IP地址的正确性，同时支持IPv4和IPv6
            </summary>
            <param name="s">源字符串</param>
            <returns>是否匹配成功</returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.MatchPhoneNumber(System.String,System.Boolean@)">
            <summary>
            匹配手机号码
            </summary>
            <param name="s">源字符串</param>
            <param name="isMatch">是否匹配成功，若返回true，则会得到一个Match对象，否则为null</param>
            <returns>匹配对象</returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.MatchPhoneNumber(System.String)">
            <summary>
            匹配手机号码
            </summary>
            <param name="s">源字符串</param>
            <returns>是否匹配成功</returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.ReferenceEquals(System.Object,System.Object)">
            <summary>
            严格比较两个对象是否是同一对象
            </summary>
            <param name="_this">自己</param>
            <param name="o">需要比较的对象</param>
            <returns>是否同一对象</returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.IsNullOrEmpty(System.String)">
            <summary>
            判断字符串是否为空
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.To``1(System.IConvertible)">
            <summary>
            类型直转
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.ToDateTime(System.String)">
            <summary>
            字符串转时间
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.ToGuid(System.String)">
            <summary>
            字符串转Guid
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.Replace(System.String,System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            根据正则替换
            </summary>
            <param name="input"></param>
            <param name="regex">正则表达式</param>
            <param name="replacement">新内容</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.CreateShortToken(System.String,System.Byte)">
            <summary>
            生成唯一短字符串
            </summary>
            <param name="str"></param>
            <param name="chars">可用字符数数量，0-9,a-z,A-Z</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.ToBinary(System.Int64,System.Int32)">
            <summary>
            十进制转任意进制
            </summary>
            <param name="num"></param>
            <param name="bin">进制</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.ToBinary(System.Int32,System.Int32)">
            <summary>
            十进制转任意进制
            </summary>
            <param name="num"></param>
            <param name="bin">进制</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            按字段去重
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.Digits8(System.Double)">
            <summary>
            将小数截断为8位
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.IpAddressInRange(System.String,System.String,System.String)">
            <summary>
            判断IP地址在不在某个IP地址段
            </summary>
            <param name="input">需要判断的IP地址</param>
            <param name="begin">起始地址</param>
            <param name="ends">结束地址</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.IsPrivateIP(System.Net.IPAddress)">
            <summary>
            判断IP是否是私有地址
            </summary>
            <param name="myIPAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.IsPrivateIP(System.String)">
            <summary>
            判断IP是否是私有地址
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Extensions.IsExternalAddress(System.String)">
            <summary>
            判断url是否是外部地址
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="T:Masuit.Tools.Files.ClassZip">
            <summary>
            ClassZip
            </summary>
        </member>
        <member name="M:Masuit.Tools.Files.ClassZip.Zip(System.String,System.String,System.Int32)">
            <summary>
            压缩
            </summary>
            <param name="fileToZip">待压缩的文件目录或文件</param>
            <param name="zipedFile">生成的目标文件</param>
            <param name="level">压缩级别，默认值6</param>
        </member>
        <member name="M:Masuit.Tools.Files.ClassZip.ZipStream(System.Collections.Generic.List{System.String})">
            <summary>
            将多个文件压缩到一个文件流中，可保存为zip文件，方便于web方式下载
            </summary>
            <param name="files">多个文件路径，文件或文件夹</param>
            <returns>文件流</returns>
        </member>
        <member name="M:Masuit.Tools.Files.ClassZip.UnZip(System.String,System.String)">
            <summary>
            解压
            </summary>
            <param name="fileToUpZip">待解压的文件</param>
            <param name="zipedFolder">解压目标存放目录</param>
        </member>
        <member name="T:Masuit.Tools.Files.ExtensionAttach">
            <summary>
            文件关联
            </summary>
        </member>
        <member name="M:Masuit.Tools.Files.ExtensionAttach.SaveReg(System.String,System.String)">
            <summary>
            关联文件
            </summary>
            <param name="filePathString">应用程序路径</param>
            <param name="pFileTypeName">文件类型</param>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to access the registry key in the specified mode. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The user does not have the necessary registry rights.</exception>
            <exception cref="T:System.IO.IOException">The nesting level exceeds 510.-or-A system error occurred, such as deletion of the key, or an attempt to create a key in the <see cref="F:Microsoft.Win32.Registry.LocalMachine" /> root.</exception>
        </member>
        <member name="M:Masuit.Tools.Files.ExtensionAttach.DelReg(System.String)">
            <summary>
            取消文件关联
            </summary>
            <param name="pFileTypeName">文件类型</param>
            <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to access the registry key in the specified mode. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The user does not have the necessary registry rights.</exception>
            <exception cref="T:System.IO.IOException">An I/O error has occurred.</exception>
        </member>
        <member name="T:Masuit.Tools.Files.FileExt">
            <summary>
            大文件操作扩展类
            </summary>
        </member>
        <member name="M:Masuit.Tools.Files.FileExt.CopyToFile(System.IO.Stream,System.String,System.Int32)">
            <summary>
            以文件流的形式复制大文件
            </summary>
            <param name="fs">源</param>
            <param name="dest">目标地址</param>
            <param name="bufferSize">缓冲区大小，默认8MB</param>
        </member>
        <member name="M:Masuit.Tools.Files.FileExt.CopyToFileAsync(System.IO.Stream,System.String,System.Int32)">
            <summary>
            以文件流的形式复制大文件(异步方式)
            </summary>
            <param name="fs">源</param>
            <param name="dest">目标地址</param>
            <param name="bufferSize">缓冲区大小，默认8MB</param>
        </member>
        <member name="M:Masuit.Tools.Files.FileExt.SaveFile(System.IO.MemoryStream,System.String)">
            <summary>
            将内存流转储成文件
            </summary>
            <param name="ms"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Masuit.Tools.Files.FileExt.GetFileMD5(System.IO.FileStream)">
            <summary>
            计算文件的 MD5 值
            </summary>
            <param name="fs">源文件流</param>
            <returns>MD5 值16进制字符串</returns>
        </member>
        <member name="M:Masuit.Tools.Files.FileExt.GetFileMD5Async(System.IO.FileStream)">
            <summary>
            计算文件的 MD5 值
            </summary>
            <param name="fs">源文件流</param>
            <returns>MD5 值16进制字符串</returns>
        </member>
        <member name="M:Masuit.Tools.Files.FileExt.GetFileSha1(System.IO.Stream)">
            <summary>
            计算文件的 sha1 值
            </summary>
            <param name="fs">源文件流</param>
            <returns>sha1 值16进制字符串</returns>
        </member>
        <member name="M:Masuit.Tools.Files.FileExt.GetFileSha1Async(System.IO.FileStream)">
            <summary>
            计算文件的 sha1 值
            </summary>
            <param name="fs">源文件流</param>
            <returns>sha1 值16进制字符串</returns>
        </member>
        <member name="M:Masuit.Tools.Files.FileExt.HashFile(System.IO.Stream,System.String)">
            <summary>
            计算文件的哈希值
            </summary>
            <param name="fs">被操作的源数据流</param>
            <param name="algName">算法:sha1,md5</param>
            <returns>哈希值16进制字符串</returns>
        </member>
        <member name="M:Masuit.Tools.Files.FileExt.HashFileAsync(System.IO.Stream,System.String)">
            <summary>
            计算文件的哈希值
            </summary>
            <param name="fs">被操作的源数据流</param>
            <param name="algName">算法:sha1,md5</param>
            <returns>哈希值16进制字符串</returns>
        </member>
        <member name="M:Masuit.Tools.Files.FileExt.HashData(System.IO.Stream,System.String)">
            <summary>
            计算哈希值
            </summary>
            <param name="stream">要计算哈希值的 Stream</param>
            <param name="algName">算法:sha1,md5</param>
            <returns>哈希值字节数组</returns>
        </member>
        <member name="M:Masuit.Tools.Files.FileExt.HashDataAsync(System.IO.Stream,System.String)">
            <summary>
            计算哈希值
            </summary>
            <param name="stream">要计算哈希值的 Stream</param>
            <param name="algName">算法:sha1,md5</param>
            <returns>哈希值字节数组</returns>
        </member>
        <member name="M:Masuit.Tools.Files.FileExt.ByteArrayToHexString(System.Byte[])">
            <summary>
            字节数组转换为16进制表示的字符串
            </summary>
        </member>
        <member name="T:Masuit.Tools.Files.INIFile">
            <summary>
            INI文件操作辅助类
            </summary>
        </member>
        <member name="F:Masuit.Tools.Files.INIFile.path">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="M:Masuit.Tools.Files.INIFile.#ctor(System.String)">
            <summary>
            传入INI文件路径构造对象
            </summary>
            <param name="INIPath">INI文件路径</param>
        </member>
        <member name="M:Masuit.Tools.Files.INIFile.IniWriteValue(System.String,System.String,System.String)">
            <summary>
            写INI文件
            </summary>
            <param name="Section">分组节点</param>
            <param name="Key">关键字</param>
            <param name="Value">值</param>
        </member>
        <member name="M:Masuit.Tools.Files.INIFile.IniReadValue(System.String,System.String)">
            <summary>
            读取INI文件
            </summary>
            <param name="Section">分组节点</param>
            <param name="Key">关键字</param>
            <returns>值</returns>
        </member>
        <member name="M:Masuit.Tools.Files.INIFile.IniReadValues(System.String,System.String)">
            <summary>
            读取INI文件
            </summary>
            <param name="section">分组节点</param>
            <param name="key">关键字</param>
            <returns>值的字节表现形式</returns>
        </member>
        <member name="M:Masuit.Tools.Files.INIFile.ClearAllSection">
            <summary>
            删除ini文件下所有段落
            </summary>
        </member>
        <member name="M:Masuit.Tools.Files.INIFile.ClearSection(System.String)">
            <summary>
            删除ini文件下指定段落下的所有键
            </summary>
            <param name="Section">分组节点</param>
        </member>
        <member name="T:Masuit.Tools.Files.ISevenZipCompressor">
            <summary>
            7z压缩
            </summary>
        </member>
        <member name="M:Masuit.Tools.Files.ISevenZipCompressor.Decompress(System.String,System.String,System.Boolean)">
            <summary>
            解压文件，自动检测压缩包类型
            </summary>
            <param name="compressedFile">rar文件</param>
            <param name="dir">解压到...</param>
            <param name="ignoreEmptyDir">忽略空文件夹</param>
        </member>
        <member name="M:Masuit.Tools.Files.ISevenZipCompressor.Extract(System.String,System.String,System.Boolean)">
            <summary>
            解压文件，自动检测压缩包类型
            </summary>
            <param name="compressedFile">rar文件</param>
            <param name="dir">解压到...</param>
            <param name="ignoreEmptyDir">忽略空文件夹</param>
        </member>
        <member name="M:Masuit.Tools.Files.ISevenZipCompressor.UnRar(System.String,System.String,System.Boolean)">
            <summary>
            解压rar文件
            </summary>
            <param name="rar">rar文件</param>
            <param name="dir">解压到...</param>
            <param name="ignoreEmptyDir">忽略空文件夹</param>
        </member>
        <member name="M:Masuit.Tools.Files.ISevenZipCompressor.Zip(System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            压缩多个文件
            </summary>
            <param name="files">多个文件路径，文件或文件夹</param>
            <param name="zipFile">压缩到...</param>
            <param name="rootdir">压缩包内部根文件夹</param>
        </member>
        <member name="M:Masuit.Tools.Files.ISevenZipCompressor.ZipStream(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            将多个文件压缩到一个文件流中，可保存为zip文件，方便于web方式下载
            </summary>
            <param name="files">多个文件路径，文件或文件夹，或网络路径http/https</param>
            <param name="rootdir"></param>
            <returns>文件流</returns>
        </member>
        <member name="T:Masuit.Tools.Files.SevenZipCompressor">
            <summary>
            7z压缩
            </summary>
        </member>
        <member name="M:Masuit.Tools.Files.SevenZipCompressor.#ctor(System.Net.Http.IHttpClientFactory)">
            <summary>
            
            </summary>
            <param name="httpClientFactory"></param>
        </member>
        <member name="M:Masuit.Tools.Files.SevenZipCompressor.ZipStream(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            将多个文件压缩到一个文件流中，可保存为zip文件，方便于web方式下载
            </summary>
            <param name="files">多个文件路径，文件或文件夹，或网络路径http/https</param>
            <param name="rootdir"></param>
            <returns>文件流</returns>
        </member>
        <member name="M:Masuit.Tools.Files.SevenZipCompressor.Zip(System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            压缩多个文件
            </summary>
            <param name="files">多个文件路径，文件或文件夹</param>
            <param name="zipFile">压缩到...</param>
            <param name="rootdir">压缩包内部根文件夹</param>
        </member>
        <member name="M:Masuit.Tools.Files.SevenZipCompressor.UnRar(System.String,System.String,System.Boolean)">
            <summary>
            解压rar文件
            </summary>
            <param name="rar">rar文件</param>
            <param name="dir">解压到...</param>
            <param name="ignoreEmptyDir">忽略空文件夹</param>
        </member>
        <member name="M:Masuit.Tools.Files.SevenZipCompressor.Extract(System.String,System.String,System.Boolean)">
            <summary>
            解压文件，自动检测压缩包类型
            </summary>
            <param name="compressedFile">rar文件</param>
            <param name="dir">解压到...</param>
            <param name="ignoreEmptyDir">忽略空文件夹</param>
        </member>
        <member name="M:Masuit.Tools.Files.SevenZipCompressor.Decompress(System.String,System.String,System.Boolean)">
            <summary>
            解压文件，自动检测压缩包类型
            </summary>
            <param name="compressedFile">rar文件</param>
            <param name="dir">解压到...</param>
            <param name="ignoreEmptyDir">忽略空文件夹</param>
        </member>
        <member name="M:Masuit.Tools.Files.SevenZipCompressor.CreateZipArchive(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            创建zip包
            </summary>
            <param name="files"></param>
            <param name="rootdir"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Files.SevenZipCompressor.GetFileEntryMaps(System.Collections.Generic.List{System.String})">
            <summary>
            获取文件路径和zip-entry的映射
            </summary>
            <param name="files"></param>
            <returns></returns>
        </member>
        <member name="T:Masuit.Tools.Files.SharpZip">
            <summary>
            SharpZip
            </summary>
        </member>
        <member name="M:Masuit.Tools.Files.SharpZip.PackFiles(System.String,System.String)">
            <summary>
            文件压缩
            </summary> 
            <param name="filename"> 压缩后的文件名(包含物理路径)</param>
            <param name="directory">待压缩的文件夹(包含物理路径)</param>
        </member>
        <member name="M:Masuit.Tools.Files.SharpZip.PackFilesAsync(System.String,System.String)">
            <summary>
            文件压缩
            </summary> 
            <param name="filename"> 压缩后的文件名(包含物理路径)</param>
            <param name="directory">待压缩的文件夹(包含物理路径)</param>
        </member>
        <member name="M:Masuit.Tools.Files.SharpZip.UnpackFiles(System.String,System.String)">
            <summary>
            文件解压缩
            </summary>
            <param name="file">待解压文件名(包含物理路径)</param>
            <param name="dir"> 解压到哪个目录中(包含物理路径)</param>
        </member>
        <member name="M:Masuit.Tools.Files.SharpZip.UnpackFilesAsync(System.String,System.String)">
            <summary>
            文件解压缩
            </summary>
            <param name="file">待解压文件名(包含物理路径)</param>
            <param name="dir"> 解压到哪个目录中(包含物理路径)</param>
        </member>
        <member name="T:Masuit.Tools.Files.WinrarHelper">
            <summary>
            WinRAR压缩操作
            </summary>
        </member>
        <member name="M:Masuit.Tools.Files.WinrarHelper.Rar(System.String,System.String,System.String)">
            <summary>
            压缩
            </summary>
            <param name="zipname">要解压的文件名</param>
            <param name="zippath">要压缩的文件目录</param>
            <param name="dirpath">初始目录</param>
        </member>
        <member name="M:Masuit.Tools.Files.WinrarHelper.UnRar(System.String,System.String)">
            <summary>
            解压缩
            </summary>
            <param name="zipname">要解压的文件名</param>
            <param name="zippath">要解压的文件路径</param>
        </member>
        <member name="T:Masuit.Tools.Hardware.CpuInfo">
            <summary>
            CPU模型
            </summary>
        </member>
        <member name="P:Masuit.Tools.Hardware.CpuInfo.DeviceID">
            <summary>
            设备ID端口
            </summary>
        </member>
        <member name="P:Masuit.Tools.Hardware.CpuInfo.Type">
            <summary>
            CPU型号 
            </summary>
        </member>
        <member name="P:Masuit.Tools.Hardware.CpuInfo.Manufacturer">
            <summary>
            CPU厂商
            </summary>
        </member>
        <member name="P:Masuit.Tools.Hardware.CpuInfo.MaxClockSpeed">
            <summary>
            CPU最大睿频
            </summary>
        </member>
        <member name="P:Masuit.Tools.Hardware.CpuInfo.CurrentClockSpeed">
            <summary>
            CPU的时钟频率
            </summary>
        </member>
        <member name="P:Masuit.Tools.Hardware.CpuInfo.NumberOfCores">
            <summary>
            CPU核心数
            </summary>
        </member>
        <member name="P:Masuit.Tools.Hardware.CpuInfo.NumberOfLogicalProcessors">
            <summary>
            逻辑处理器核心数
            </summary>
        </member>
        <member name="P:Masuit.Tools.Hardware.CpuInfo.CpuLoad">
            <summary>
            CPU使用率
            </summary>
        </member>
        <member name="P:Masuit.Tools.Hardware.CpuInfo.DataWidth">
            <summary>
            CPU位宽
            </summary>
        </member>
        <member name="P:Masuit.Tools.Hardware.CpuInfo.Temperature">
            <summary>
            核心温度
            </summary>
        </member>
        <member name="T:Masuit.Tools.Hardware.SystemInfo">
            <summary>
            硬件信息，部分功能需要C++支持
            </summary>
        </member>
        <member name="T:Masuit.Tools.Hardware.SystemInfo.CPU_INFO">
            <summary>
            定义CPU的信息结构
            </summary>
        </member>
        <member name="M:Masuit.Tools.Hardware.SystemInfo.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="P:Masuit.Tools.Hardware.SystemInfo.ProcessorCount">
            <summary>
            获取CPU核心数 
            </summary>
        </member>
        <member name="P:Masuit.Tools.Hardware.SystemInfo.CpuLoad">
            <summary>
            获取CPU占用率 %
            </summary>
        </member>
        <member name="P:Masuit.Tools.Hardware.SystemInfo.MemoryAvailable">
            <summary>
            获取可用内存
            </summary>
        </member>
        <member name="P:Masuit.Tools.Hardware.SystemInfo.PhysicalMemory">
            <summary>
            获取物理内存
            </summary>
        </member>
        <member name="M:Masuit.Tools.Hardware.SystemInfo.FindAllApps(System.Int32)">
            <summary>
            查找所有应用程序标题 
            </summary>
            <param name="handle">应用程序标题范型</param>
            <returns>所有应用程序集合</returns>
        </member>
        <member name="M:Masuit.Tools.Hardware.SystemInfo.GetCpuCount">
            <summary>
            获取CPU的数量
            </summary>
            <returns>CPU的数量</returns>
        </member>
        <member name="M:Masuit.Tools.Hardware.SystemInfo.GetCpuInfo">
            <summary>
            获取CPU信息
            </summary>
            <returns>CPU信息</returns>
        </member>
        <member name="M:Masuit.Tools.Hardware.SystemInfo.GetRamInfo">
            <summary>
            获取内存信息
            </summary>
            <returns>内存信息</returns>
        </member>
        <member name="M:Masuit.Tools.Hardware.SystemInfo.GetCPUTemperature">
            <summary>
            获取CPU温度
            </summary>
            <returns>CPU温度</returns>
        </member>
        <member name="M:Masuit.Tools.Hardware.SystemInfo.GetProcessorData">
            <summary>
            WMI接口获取CPU使用率
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Hardware.SystemInfo.GetMemoryVData">
            <summary>
            获取虚拟内存使用率详情
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Hardware.SystemInfo.GetUsageVirtualMemory">
            <summary>
            获取虚拟内存使用率
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Hardware.SystemInfo.GetUsedVirtualMemory">
            <summary>
            获取虚拟内存已用大小
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Hardware.SystemInfo.GetTotalVirtualMemory">
            <summary>
            获取虚拟内存总大小
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Hardware.SystemInfo.GetMemoryPData">
            <summary>
            获取物理内存使用率详情描述
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Hardware.SystemInfo.GetTotalPhysicalMemory">
            <summary>
            获取物理内存总数，单位B
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Hardware.SystemInfo.GetFreePhysicalMemory">
            <summary>
            获取空闲的物理内存数，单位B
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Hardware.SystemInfo.GetUsedPhysicalMemory">
            <summary>
            获取已经使用了的物理内存数，单位B
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Hardware.SystemInfo.GetDiskData(Masuit.Tools.Hardware.DiskData)">
            <summary>
            获取硬盘的读写速率
            </summary>
            <param name="dd">读或写</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Hardware.SystemInfo.GetNetData(Masuit.Tools.Hardware.NetData)">
            <summary>
            获取网络的传输速率
            </summary>
            <param name="nd">上传或下载</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Hardware.SystemInfo.GetMacAddress">
            <summary>
            获取网卡硬件地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Hardware.SystemInfo.GetIPAddress">
            <summary>
            获取IP地址 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Hardware.SystemInfo.GetLocalUsedIP">
            <summary>  
            获取当前使用的IP  
            </summary>  
            <returns></returns>  
        </member>
        <member name="M:Masuit.Tools.Hardware.SystemInfo.RunApp(System.String,System.String,System.Boolean)">
            <summary>  
            运行一个控制台程序并返回其输出参数。  
            </summary>  
            <param name="filename">程序名</param>  
            <param name="arguments">输入参数</param>
            <param name="recordLog">是否记录日志</param>
            <returns></returns>  
        </member>
        <member name="M:Masuit.Tools.Hardware.SystemInfo.GetOsVersion">
            <summary>
            获取操作系统版本
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Hardware.SystemInfo.FormatBytes(System.Double)">
            <summary>
            将速度值格式化成字节单位
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Hardware.SystemInfo.BootTime">
            <summary>
            获取计算机开机时间
            </summary>
            <returns>datetime</returns>
        </member>
        <member name="M:Masuit.Tools.Hardware.SystemInfo.QueryComputerSystem(System.String)">
            <summary>
            查询计算机系统信息
            </summary>
            <param name="type">类型名</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Hardware.SystemInfo.QueryEnvironment(System.String)">
            <summary>
            获取环境变量
            </summary>
            <param name="type">环境变量名</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Hardware.SystemInfo.DiskFree">
            <summary>
            获取磁盘可用空间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Hardware.SystemInfo.DiskTotalSpace">
            <summary>
            获取磁盘总空间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Hardware.SystemInfo.DiskUsedSpace">
            <summary>
            获取磁盘已用空间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Hardware.SystemInfo.DiskUsage">
            <summary>
            获取磁盘使用率
            </summary>
            <returns></returns>
        </member>
        <member name="T:Masuit.Tools.Hardware.DiskData">
            <summary>
            磁盘数据
            </summary>
        </member>
        <member name="F:Masuit.Tools.Hardware.DiskData.ReadAndWrite">
            <summary>
            读写
            </summary>
        </member>
        <member name="F:Masuit.Tools.Hardware.DiskData.Read">
            <summary>
            读
            </summary>
        </member>
        <member name="F:Masuit.Tools.Hardware.DiskData.Write">
            <summary>
            写
            </summary>
        </member>
        <member name="T:Masuit.Tools.Hardware.MemoryInfo">
            <summary>
            定义内存的信息结构
            </summary>
        </member>
        <member name="T:Masuit.Tools.Hardware.NetData">
            <summary>
            网络数据
            </summary>
        </member>
        <member name="F:Masuit.Tools.Hardware.NetData.ReceivedAndSent">
            <summary>
            收发
            </summary>
        </member>
        <member name="F:Masuit.Tools.Hardware.NetData.Received">
            <summary>
            收
            </summary>
        </member>
        <member name="F:Masuit.Tools.Hardware.NetData.Sent">
            <summary>
            发
            </summary>
        </member>
        <member name="T:Masuit.Tools.Hardware.RamInfo">
            <summary>
            内存条模型
            </summary>
        </member>
        <member name="P:Masuit.Tools.Hardware.RamInfo.MemoryAvailable">
            <summary>
            可用物理内存
            </summary>
        </member>
        <member name="P:Masuit.Tools.Hardware.RamInfo.PhysicalMemory">
            <summary>
            物理总内存
            </summary>
        </member>
        <member name="P:Masuit.Tools.Hardware.RamInfo.TotalPageFile">
            <summary>
            分页内存总数
            </summary>
        </member>
        <member name="P:Masuit.Tools.Hardware.RamInfo.AvailablePageFile">
            <summary>
            分页内存可用
            </summary>
        </member>
        <member name="P:Masuit.Tools.Hardware.RamInfo.TotalVirtual">
            <summary>
            虚拟内存总数
            </summary>
        </member>
        <member name="P:Masuit.Tools.Hardware.RamInfo.AvailableVirtual">
            <summary>
            虚拟内存可用
            </summary>
        </member>
        <member name="P:Masuit.Tools.Hardware.RamInfo.MemoryUsage">
            <summary>
            内存使用率
            </summary>
        </member>
        <member name="T:Masuit.Tools.Hardware.SystemtimeInfo">
            <summary>
            定义系统时间的信息结构
            </summary>
        </member>
        <member name="T:Masuit.Tools.Hardware.Unit">
            <summary>
            字节单位枚举
            </summary>
        </member>
        <member name="T:Masuit.Tools.Html.HtmlTools">
             <summary>
            1、获取HTML<br/>
            1.1获取指定页面的HTML代码 GetHtml(string url, string postData, bool isPost, CookieContainer cookieContainer)<br/>
            1.2获取HTMLGetHtml(string url, CookieContainer cookieContainer)<br/>
            2、获取字符流<br/>
            2.1获取字符流GetStream(string url, CookieContainer cookieContainer)<br/>
            3、清除HTML标记 <br/>
            3.1清除HTML标记  NoHTML(string Htmlstring)<br/>
            4、匹配页面的链接 <br/>
            4.1获取页面的链接正则 GetHref(string HtmlCode)<br/>
            5、匹配页面的图片地址<br/>
             5.1匹配页面的图片地址 GetImgSrc(string HtmlCode, string imgHttp)<br/>
            5.2匹配<img src="" />中的图片路径实际链接  GetImg(string ImgString, string imgHttp)<br/>
            6、抓取远程页面内容<br/>
             6.1以GET方式抓取远程页面内容 Get_Http(string tUrl)<br/>
             6.2以POST方式抓取远程页面内容 Post_Http(string url, string postData, string encodeType)<br/>
            7、压缩HTML输出<br/>
            7.1压缩HTML输出 ZipHtml(string Html)<br/>
            8、过滤HTML标签<br/>
             8.1过滤指定HTML标签 DelHtml(string s_TextStr, string html_Str)  <br/>
             8.2过滤HTML中的不安全标签 RemoveUnsafeHtml(string content)<br/>
             HTML转行成TEXT HtmlToTxt(string strHtml)<br/>
             字符串转换为 HtmlStringToHtml(string str)<br/>
             html转换成字符串HtmlToString(string strHtml)<br/>
             获取URL编码<br/>
             判断URL是否有效<br/>
             返回 HTML 字符串的编码解码结果
             </summary>
            <summary>
            html工具类
            </summary>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.RemoveHtmlTag(System.String,System.Int32)">
            <summary>
            去除html标签后并截取字符串
            </summary>
            <param name="html">源html</param>
            <param name="length">截取长度</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetHtml(System.Net.Http.HttpClient,System.String)">
            <summary>
            获取HTML
            </summary>
            <param name="_"></param>
            <param name="url">地址</param>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetStream(System.Net.Http.HttpClient,System.String)">
             <summary>
             2.1获取字符流
             </summary>
            ---------------------------------------------------------------------------------------------------------------
             示例:
             System.Net.CookieContainer cookie = new System.Net.CookieContainer(); 
             Stream s = HttpHelper.GetStream("http://www.baidu.com", cookie);
             picVerify.Image = Image.FromStream(s);
            ---------------------------------------------------------------------------------------------------------------
            <param name="_"></param>
            <param name="url">地址</param>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.ClearHtml(System.String)">
            <summary>
            清理Word文档转html后的冗余标签属性
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.RemoveHtml(System.String)">
            <summary>   
            3.1清除HTML标记   
            </summary>   
            <param name="htmlstring">包括HTML的源码</param>   
            <returns>已经去除后的文字</returns>   
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetHref(System.String)">
            <summary>
            4.1获取页面的链接正则
            </summary>
            <param name="HtmlCode">html代码</param>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetAllUrl(System.String)">
            <summary>
            4.2取得所有链接URL
            </summary>
            <param name="html">html代码</param>
            <returns>提取到的url</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetAllLinkText(System.String)">
            <summary>
            4.3获取所有连接文本
            </summary>
            <param name="html">html代码</param>
            <returns>所有的带链接的a标签</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.ReplaceHtmlImgSource(System.String,System.String)">
            <summary>
            替换html的img路径为绝对路径
            </summary>
            <param name="html"></param>
            <param name="imgDest"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.ConvertImgSrcToRelativePath(System.String)">
            <summary>
            将src的绝对路径换成相对路径
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.MatchImgTags(System.String)">
            <summary>
            匹配html的所有img标签集合
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.MatchImgSrcs(System.String)">
            <summary>
            匹配html的所有img标签的src集合
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.MatchImgTag(System.String)">
            <summary>
            匹配html的一个img标签
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.MatchFirstImgSrc(System.String)">
            <summary>
            获取html中第一个img标签的src
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.MatchRandomImgSrc(System.String)">
            <summary>
            随机获取html代码中的img标签的src属性
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.Get_Http(System.Net.HttpWebRequest,System.String)">
            <summary>
            6.1以GET方式抓取远程页面内容
            </summary>
            <param name="_"></param>
            <param name="tUrl">URL</param>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.Post_Http(System.Net.HttpWebRequest,System.String,System.String,System.String)">
            <summary>
            6.2以POST方式抓取远程页面内容
            </summary>
            <param name="_"></param>
            <param name="url">URL</param>
            <param name="postData">参数列表</param>
            <param name="encodeType">编码类型</param>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.ZipHtml(System.String)">
            <summary>
            7.1压缩HTML输出
            </summary>
            <param name="html">html</param>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.DelHtml(System.String,System.String)">
            <summary>
            8.1过滤指定HTML标签
            </summary>
            <param name="sTextStr">要过滤的字符</param>
            <param name="htmlStr">a img p div</param>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.RemoveUnsafeHtml(System.String)">
            <summary>
            8.2过滤HTML中的不安全标签，去掉尖括号
            </summary>
            <param name="content">html代码</param>
            <returns>过滤后的安全内容</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.HtmlToTxt(System.String)">
            <summary>
            HTML转行成TEXT HtmlToTxt(string strHtml)
            </summary>
            <param name="strHtml">html代码</param>
            <returns>普通文本</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.StringToHtml(System.String)">
            <summary>
            字符串转换为 HtmlStringToHtml(string str)
            </summary>
            <param name="str">字符串</param>
            <returns>html标签</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.HtmlToString(System.String)">
            <summary>
            html转换成字符串
            </summary>
            <param name="strHtml">html代码</param>
            <returns>安全的字符串</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetEncoding(System.Net.HttpWebRequest,System.String)">
            <summary>
            获取URL编码
            </summary>
            <param name="_"></param>
            <param name="url">URL</param>
            <returns>编码类型</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.HtmlEncode(System.String)">
            <summary>
            返回 HTML 字符串的编码结果
            </summary>
            <param name="inputData">字符串</param>
            <returns>编码结果</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.HtmlDecode(System.String)">
            <summary>
            返回 HTML 字符串的解码结果
            </summary>
            <param name="str">字符串</param>
            <returns>解码结果</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetCookieCollection(System.Net.CookieCollection,System.String)">
            <summary>
            获取Cookie集合
            </summary>
            <param name="cookie"></param>
            <param name="cookieString">Cookie的键</param>
            <returns>Cookie键值集合</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetTextFromHTML(System.String)">
            <summary>
            从HTML中获取文本,保留br,p,img
            </summary>
            <param name="HTML">html代码</param>
            <returns>保留br,p,img的文本</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetHiddenKeyValue(System.String,System.String)">
            <summary>
            获取HTML页面内制定Key的Value内容
            </summary>
            <param name="html">html源代码</param>
            <param name="key">键</param>
            <returns>获取到的值</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.StrFormat(System.String)">
            <summary>
            替换回车换行符为html换行符
            </summary>
            <param name="str">html</param>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.EncodeHtml(System.String)">
            <summary>
            替换html字符
            </summary>
            <param name="strHtml">html</param>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.ReplaceStrToScript(System.String)">
            <summary>
            为脚本替换特殊字符串
            </summary>
            <param name="str"> </param>
            <returns> </returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.HtmlSantinizerStandard(System.String)">
            <summary>
            标准的防止html的xss净化器
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.HtmlSantinizerCustom(System.String,System.String[],System.String[],System.String[])">
            <summary>
            自定义的防止html的xss净化器
            </summary>
            <param name="html">源html</param>
            <param name="labels">需要移除的标签集合</param>
            <param name="attributes">需要移除的属性集合</param>
            <param name="styles">需要移除的样式集合</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetList(System.String,System.String,System.Int32)">
            <summary>
            多个匹配内容
            </summary>
            <param name="sInput">输入内容</param>
            <param name="sRegex">表达式字符串</param>
            <param name="iGroupIndex">第几个分组, 从1开始, 0代表不分组</param>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetList(System.String,System.String,System.String)">
            <summary>
            多个匹配内容
            </summary>
            <param name="sInput">输入内容</param>
            <param name="sRegex">表达式字符串</param>
            <param name="sGroupName">分组名, ""代表不分组</param>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetText(System.String,System.String,System.Int32)">
            <summary>
            单个匹配内容
            </summary>
            <param name="sInput">输入内容</param>
            <param name="sRegex">表达式字符串</param>
            <param name="iGroupIndex">分组序号, 从1开始, 0不分组</param>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetText(System.String,System.String,System.String)">
            <summary>
            单个匹配内容
            </summary>
            <param name="sInput">输入内容</param>
            <param name="sRegex">表达式字符串</param>
            <param name="sGroupName">分组名, ""代表不分组</param>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.Replace(System.String,System.String,System.String,System.Int32)">
            <summary>
            替换指定内容
            </summary>
            <param name="sInput">输入内容</param>
            <param name="sRegex">表达式字符串</param>
            <param name="sReplace">替换值</param>
            <param name="iGroupIndex">分组序号, 0代表不分组</param>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.Replace(System.String,System.String,System.String,System.String)">
            <summary>
            替换指定内容
            </summary>
            <param name="sInput">输入内容</param>
            <param name="sRegex">表达式字符串</param>
            <param name="sReplace">替换值</param>
            <param name="sGroupName">分组名, "" 代表不分组</param>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.Split(System.String,System.String,System.Int32)">
            <summary>
            分割指定内容
            </summary>
            <param name="sInput">输入内容</param>
            <param name="sRegex">表达式字符串</param>
            <param name="iStrLen">最小保留字符串长度</param>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetLinks(System.String)">
            <summary>
            多个链接
            </summary>
            <param name="sInput">输入内容</param>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetLinkHelp(System.String)">
            <summary>
            单个链接
            </summary>
            <param name="sInput">输入内容</param>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetImgTag(System.String)">
            <summary>
            图片标签
            </summary>
            <param name="sInput">输入内容</param>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetImgSrc(System.String)">
            <summary>
            图片地址
            </summary>
            <param name="sInput">输入内容</param>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetDomain(System.String)">
            <summary>
            根据URL获得域名
            </summary>
            <param name="sInput">输入内容</param>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetTitle(System.String,System.String)">
            <summary>
            文章标题
            </summary>
            <param name="sInput">输入内容</param>
            <param name="sRegex">表达式字符串</param>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetTitle(System.String)">
            <summary>
            网页标题
            </summary>
            <param name="sInput">html</param>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetHtml(System.String)">
            <summary>
            网页内容
            </summary>
            <param name="sInput">输入内容</param>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetBodyHelp(System.String)">
            <summary>
            网页Body内容
            </summary>
            <param name="sInput">html</param>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetBody(System.String,System.String)">
            <summary>
            网页Body内容
            </summary>
            <param name="sInput">输入内容</param>
            <param name="sRegex">表达式字符串</param>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetSource(System.String,System.String)">
            <summary>
            文章来源
            </summary>
            <param name="sInput">输入内容</param>
            <param name="sRegex">表达式字符串</param>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetAuthor(System.String,System.String)">
            <summary>
            作者名
            </summary>
            <param name="sInput">输入内容</param>
            <param name="sRegex">表达式字符串</param>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetPageLinks(System.String,System.String)">
            <summary>
            分页链接地址
            </summary>
            <param name="sInput">输入内容</param>
            <param name="sRegex">表达式字符串</param>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetUrl(System.String,System.String)">
            <summary>
            根据相对路径得到绝对路径
            </summary>
            <param name="sInput">原始网站地址</param>
            <param name="sRelativeUrl">相对链接地址</param>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools._GetStandardUrlDepth(System.String)">
            <summary>
            获得标准的URL路径深度
            </summary>
            <param name="url">URL路径</param>
            <returns>返回标准的形式：http://www.163.com/或http://www.163.com/news/。</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetKeyWord(System.String)">
            <summary>
            关键字
            </summary>
            <param name="sInput">输入内容</param>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetContent(System.String,System.String,System.String,System.Data.DataTable)">
            <summary>
            获取内容
            </summary>
            <param name="sOriContent">原始数据</param>
            <param name="sOtherRemoveReg">需要移除的字符</param>
            <param name="sPageUrl">URL</param>
            <param name="dtAntiLink">反链 表数据</param>
            <returns>转码后的内容</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.IsXml(System.String)">
            <summary>
            判断是否是xml格式
            </summary>
            <param name="sFormartted">输入内容</param>
            <returns>是否是xml数据</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.ClearTag(System.String)">
            <summary>
            清除html标签
            </summary>
            <param name="sHtml">html代码</param>
            <returns>清理后的内容</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.ClearTag(System.String,System.String)">
            <summary>
            根据正则清除html标签
            </summary>
            <param name="sHtml">html代码</param>
            <param name="sRegex">正则表达式</param>
            <returns>清理后的内容</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.ConvertToJavascript(System.String)">
            <summary>
            将html转换成js代码
            </summary>
            <param name="sHtml">html代码</param>
            <returns>js代码</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.DelTag(System.String,System.String,System.Boolean)">
            <summary>
            删除字符串中的特定标记 
            </summary>
            <param name="str">html代码</param>
            <param name="tag">指定的标记</param>
            <param name="isContent">是否清除内容 </param>
            <returns>清理后的代码</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.DelTagArray(System.String,System.String,System.Boolean)">
            <summary>
            删除字符串中的一组标记 
            </summary>
            <param name="str">html代码</param>
            <param name="tagA">标记</param>
            <param name="isContent">是否清除内容 </param>
            <returns>清理后的代码</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetLink(System.String)">
            <summary>
            根据内容获得链接
            </summary>
            <param name="sContent">html代码</param>
            <returns>链接</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetTextByLink(System.String)">
            <summary>
            根据链接得到文本
            </summary>
            <param name="sContent">链接</param>
            <returns>文本</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.IsExistsScriptLink(System.String)">
            <summary>
            判断是否是js链接
            </summary>
            <param name="sHtml">html</param>
            <returns>判断是否是js链接</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetLinksFromRss(System.String,System.String)">
            <summary>
            从RSS FEED中读取
            </summary>
            <param name="sContent">RSS内容</param>
            <param name="sUrl">URL</param>
            <returns>读取到的内容</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetLinksFromRss(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String}@)">
            <summary>
            从RSS FEED中读取
            </summary>
            <param name="sContent">RSS内容</param>
            <param name="sUrl">URL</param>
            <param name="lisDes">过滤条件</param>
            <returns>读取到的内容</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetTitleFromRss(System.String)">
            <summary>
             从RSS FEED中读取标题
            </summary>
            <param name="sContent">RSS</param>
            <returns>标题</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.RemoveByReg(System.String,System.String)">
            <summary>
            根据标签进行移除
            </summary>
            <param name="sContent">html</param>
            <param name="sRegex">正则表达式</param>
            <returns>清理后的代码</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.ReplaceByReg(System.String,System.String,System.String)">
            <summary>
            根据正则表达式替换内容
            </summary>
            <param name="sContent">html</param>
            <param name="sReplace">需要替换的内容</param>
            <param name="sRegex">符合正则的内容</param>
            <returns>替换后内容</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetBody(System.String)">
            <summary>
             网页Body内容
            </summary>
            <param name="sContent">html源代码</param>
            <returns>网页Body内容</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetTextByReg(System.String,System.String)">
            <summary>
            根据标签获取文本
            </summary>
            <param name="sContent">html</param>
            <param name="sRegex">正则表达式</param>
            <returns>文本</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetTextByReg(System.String,System.String,System.String)">
            <summary>
            根据标签获取文本
            </summary>
            <param name="sContent">html</param>
            <param name="sRegex">正则表达式</param>
            <param name="sGroupName">分组名</param>
            <returns>文本</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetUrlByRelative(System.String,System.String)">
            <summary>
            获得链接的绝对路径
            </summary>
            <param name="sUrl">原链接地址</param>
            <param name="sRUrl">相对地址</param>
            <returns>获得链接的绝对路径</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetListByReg(System.String,System.String)">
            <summary>
            根据标签获取数据集合
            </summary>
            <param name="sContent">html</param>
            <param name="sRegex">正则表达式</param>
            <returns>数据集合</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetDomainUrl(System.String)">
            <summary>
            获得主域
            </summary>
            <param name="sUrl">URL</param>
            <returns>域名</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetTxtFromHtml(System.String)">
            <summary>
            从html中过滤出文本
            </summary>
            <param name="sHtml">html</param>
            <returns>纯文本</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetTxtFromHtml2(System.String)">
            <summary>
            从html中过滤出文本，不过保留换行符号
            </summary>
            <param name="sHtml">html源代码</param>
            <returns>从html中过滤出文本，不过保留换行符号</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.RemoveEndWith(System.String,System.String)">
            <summary>
            按结尾移除内容
            </summary>
            <param name="sOrg">原始数据</param>
            <param name="sEnd">结束的字符串</param>
            <returns>清理后的内容</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetHtmlByUrl(System.String)">
            <summary>
            根据超链接地址获取页面内容
            </summary>
            <param name="sUrl">URL</param>
            <returns>页面内容</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetHtmlByUrl(System.String,System.String)">
            <summary>
            根据超链接地址获取页面内容
            </summary>
            <param name="sUrl">URL</param>
            <param name="sCoding">文件编码</param>
            <returns>页面内容</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetHtmlByUrl(System.String@,System.String)">
            <summary>
            根据超链接地址获取页面内容，并将url作为引用类型
            </summary>
            <param name="sUrl">URL</param>
            <param name="sCoding">文件编码</param>
            <returns>页面内容</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetHttpHead(System.String)">
            <summary>
            获取http报文头
            </summary>
            <param name="sUrl">URL</param>
            <returns>报文信息</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.DealWithFrame(System.String,System.String)">
            <summary>
            处理框架页面问题。如果该页面是框架结构的话，返回该框架
            </summary>
            <param name="url">URL</param>
            <param name="content">内容</param>
            <returns>框架结构</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.DealWithIFrame(System.String,System.String)">
            <summary>
            处理浮动桢问题。如果该页面存在浮动桢，返回浮动桢
            </summary>
            <param name="url">URL</param>
            <param name="content">内容</param>
            <returns>浮动桢</returns>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetHtmlByUrlList(System.Collections.Generic.Dictionary{System.Int32,System.String},System.String)">
            <summary>
            获得多个页面
            </summary>
            <param name="listUrl">URL集合</param>
            <param name="sCoding">文件编码</param>
            <returns>页面集合</returns>
            <exception cref="T:System.Exception"> </exception>
        </member>
        <member name="T:Masuit.Tools.Html.HtmlTools.PageType">
            <summary>
            页面类型枚举
            </summary>
        </member>
        <member name="F:Masuit.Tools.Html.HtmlTools.PageType.HTML">
            <summary>
            HTML格式
            </summary>
        </member>
        <member name="F:Masuit.Tools.Html.HtmlTools.PageType.RSS">
            <summary>
            RSS格式
            </summary>
        </member>
        <member name="M:Masuit.Tools.Html.HtmlTools.GetPageType(System.String,System.String@)">
            <summary>
            获取页面类型
            </summary>
            <param name="sUrl">URL</param>
            <param name="sHtml">内容</param>
            <returns>页面类型枚举</returns>
        </member>
        <member name="T:Masuit.Tools.Logging.LogInfo">
            <summary>
            日志信息
            </summary>
        </member>
        <member name="P:Masuit.Tools.Logging.LogInfo.Time">
            <summary>
            时间
            </summary>
        </member>
        <member name="P:Masuit.Tools.Logging.LogInfo.ThreadId">
            <summary>
            线程id
            </summary>
        </member>
        <member name="P:Masuit.Tools.Logging.LogInfo.LogLevel">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="P:Masuit.Tools.Logging.LogInfo.Source">
            <summary>
            异常源
            </summary>
        </member>
        <member name="P:Masuit.Tools.Logging.LogInfo.Message">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="P:Masuit.Tools.Logging.LogInfo.Exception">
            <summary>
            异常对象
            </summary>
        </member>
        <member name="P:Masuit.Tools.Logging.LogInfo.ExceptionType">
            <summary>
            日志类型
            </summary>
        </member>
        <member name="P:Masuit.Tools.Logging.LogInfo.RequestUrl">
            <summary>
            请求路径
            </summary>
        </member>
        <member name="P:Masuit.Tools.Logging.LogInfo.UserAgent">
            <summary>
            客户端代理
            </summary>
        </member>
        <member name="T:Masuit.Tools.Logging.LogLevel">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="F:Masuit.Tools.Logging.LogLevel.Info">
            <summary>
            信息级别
            </summary>
        </member>
        <member name="F:Masuit.Tools.Logging.LogLevel.Debug">
            <summary>
            debug级别
            </summary>
        </member>
        <member name="F:Masuit.Tools.Logging.LogLevel.Error">
            <summary>
            错误级别
            </summary>
        </member>
        <member name="F:Masuit.Tools.Logging.LogLevel.Fatal">
            <summary>
            致命级别
            </summary>
        </member>
        <member name="T:Masuit.Tools.Logging.LogManager">
            <summary>
            日志组件
            </summary>
        </member>
        <member name="E:Masuit.Tools.Logging.LogManager.Event">
            <summary>
            自定义事件
            </summary>
        </member>
        <member name="P:Masuit.Tools.Logging.LogManager.LogDirectory">
            <summary>
            日志存放目录，默认日志放在当前应用程序运行目录下的logs文件夹中
            </summary>
        </member>
        <member name="M:Masuit.Tools.Logging.LogManager.Info(System.String)">
            <summary>
            写入Info级别的日志
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Masuit.Tools.Logging.LogManager.Info(System.String,System.String)">
            <summary>
            写入Info级别的日志
            </summary>
            <param name="source"></param>
            <param name="info"></param>
        </member>
        <member name="M:Masuit.Tools.Logging.LogManager.Info(System.Type,System.String)">
            <summary>
            写入Info级别的日志
            </summary>
            <param name="source"></param>
            <param name="info"></param>
        </member>
        <member name="M:Masuit.Tools.Logging.LogManager.Debug(System.String)">
            <summary>
            写入debug级别日志
            </summary>
            <param name="debug">异常对象</param>
        </member>
        <member name="M:Masuit.Tools.Logging.LogManager.Debug(System.String,System.String)">
            <summary>
            写入debug级别日志
            </summary>
            <param name="source">异常源的类型</param>
            <param name="debug">异常对象</param>
        </member>
        <member name="M:Masuit.Tools.Logging.LogManager.Debug(System.Type,System.String)">
            <summary>
            写入debug级别日志
            </summary>
            <param name="source">异常源的类型</param>
            <param name="debug">异常对象</param>
        </member>
        <member name="M:Masuit.Tools.Logging.LogManager.Error(System.Exception)">
            <summary>
            写入error级别日志
            </summary>
            <param name="error">异常对象</param>
        </member>
        <member name="M:Masuit.Tools.Logging.LogManager.Error(System.Type,System.Exception)">
            <summary>
            写入error级别日志
            </summary>
            <param name="source">异常源的类型</param>
            <param name="error">异常对象</param>
        </member>
        <member name="M:Masuit.Tools.Logging.LogManager.Error(System.Type,System.String)">
            <summary>
            写入error级别日志
            </summary>
            <param name="source">异常源的类型</param>
            <param name="error">异常信息</param>
        </member>
        <member name="M:Masuit.Tools.Logging.LogManager.Error(System.String,System.Exception)">
            <summary>
            写入error级别日志
            </summary>
            <param name="source">异常源的类型</param>
            <param name="error">异常对象</param>
        </member>
        <member name="M:Masuit.Tools.Logging.LogManager.Error(System.String,System.String)">
            <summary>
            写入error级别日志
            </summary>
            <param name="source">异常源的类型</param>
            <param name="error">异常信息</param>
        </member>
        <member name="M:Masuit.Tools.Logging.LogManager.Fatal(System.Exception)">
            <summary>
            写入fatal级别日志
            </summary>
            <param name="fatal">异常对象</param>
        </member>
        <member name="M:Masuit.Tools.Logging.LogManager.Fatal(System.Type,System.Exception)">
            <summary>
            写入fatal级别日志
            </summary>
            <param name="source">异常源的类型</param>
            <param name="fatal">异常对象</param>
        </member>
        <member name="M:Masuit.Tools.Logging.LogManager.Fatal(System.Type,System.String)">
            <summary>
            写入fatal级别日志
            </summary>
            <param name="source">异常源的类型</param>
            <param name="fatal">异常对象</param>
        </member>
        <member name="M:Masuit.Tools.Logging.LogManager.Fatal(System.String,System.Exception)">
            <summary>
            写入fatal级别日志
            </summary>
            <param name="source">异常源的类型</param>
            <param name="fatal">异常对象</param>
        </member>
        <member name="M:Masuit.Tools.Logging.LogManager.Fatal(System.String,System.String)">
            <summary>
            写入fatal级别日志
            </summary>
            <param name="source">异常源的类型</param>
            <param name="fatal">异常对象</param>
        </member>
        <member name="T:Masuit.Tools.Mapping.Copier`1">
            <summary>
            表达式树复制对象
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Masuit.Tools.Mapping.Copier`1.Copy(`0)">
            <summary>
            深拷贝
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Masuit.Tools.Mapping.Core.CreateConfig">
            <summary>
            映射配置对象
            </summary>
        </member>
        <member name="T:Masuit.Tools.Mapping.Core.MapperConfiguration`2">
            <summary>
            主映射器
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TDest">目标类型</typeparam>
        </member>
        <member name="F:Masuit.Tools.Mapping.Core.MapperConfiguration`2.actionsAfterMap">
            <summary>
            
            </summary>
        </member>
        <member name="M:Masuit.Tools.Mapping.Core.MapperConfiguration`2.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Masuit.Tools.Mapping.Core.MapperConfiguration`2.GetLambdaExpression">
            <summary>
            获取Lambda表达式树
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Mapping.Core.MapperConfiguration`2.GetFuncDelegate">
            <summary>
            获取委托
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Mapping.Core.MapperConfiguration`2.ForMember``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}})">
            <summary>
            映射成员
            </summary>
            <param name="getPropertySource">源类型</param>
            <param name="getPropertyDest">目标类型</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Mapping.Core.MapperConfiguration`2.ForMember``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Boolean)">
            <summary>
            映射成员
            </summary>
            <typeparam name="TPropertySource">属性源类型</typeparam>
            <typeparam name="TPropertyDest">属性目标类型</typeparam>
            <param name="getPropertySource">源类型</param>
            <param name="getPropertyDest">目标类型</param>
            <param name="checkIfNull">是否检查null值</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Mapping.Core.MapperConfiguration`2.ForMember``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.String)">
            <summary>
            映射成员
            </summary>
            <typeparam name="TPropertySource">属性源类型</typeparam>
            <typeparam name="TPropertyDest">属性目标类型</typeparam>
            <param name="getPropertySource">源类型</param>
            <param name="getPropertyDest">目标类型</param>
            <param name="mapperName">mapper别名</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Mapping.Core.MapperConfiguration`2.Ignore``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            忽略一些不需要映射的成员
            </summary>
            <param name="propertyDest">属性名</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Mapping.Core.MapperConfiguration`2.AfterMap(System.Action{`0,`1})">
            <summary>
            映射后要执行的操作
            </summary>
            <param name="actionAfterMap">映射后要执行的操作</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Mapping.Core.MapperConfiguration`2.ExecuteAfterActions(`0,`1)">
            <summary>
            执行后续操作。
            </summary>
            <param name="source">源类型</param>
            <param name="dest">目标类型</param>
        </member>
        <member name="M:Masuit.Tools.Mapping.Core.MapperConfiguration`2.ReverseMap(System.String)">
            <summary>
            反向映射
            </summary>
            <param name="name">mapper别名</param>
            <returns>
            新的mapper对象
            </returns>
            <exception cref="T:Masuit.Tools.Mapping.Exceptions.MapperExistException"></exception>
        </member>
        <member name="M:Masuit.Tools.Mapping.Core.MapperConfiguration`2.ConstructUsingServiceLocator">
            <summary>
            是否使用服务注入
            </summary>
        </member>
        <member name="T:Masuit.Tools.Mapping.Core.MapperConfigurationBase">
            <summary>
            mapper配置基类
            </summary>
        </member>
        <member name="P:Masuit.Tools.Mapping.Core.MapperConfigurationBase.PropertiesMapping">
            <summary>
            属性映射对应关系<br/>
            Item1 : 源表达式<br/>
            Item2 : 目标表达式<br/>
            Item3 : 检查null值<br/>
            Item4 : mapper别名<br/>
            </summary>
        </member>
        <member name="P:Masuit.Tools.Mapping.Core.MapperConfigurationBase.PropertiesToIgnore">
            <summary>
            需要被忽略映射的属性
            </summary>
        </member>
        <member name="P:Masuit.Tools.Mapping.Core.MapperConfigurationBase.UseServiceLocator">
            <summary>
            是否使用服务依赖注入
            </summary>
        </member>
        <member name="P:Masuit.Tools.Mapping.Core.MapperConfigurationBase.SourceType">
            <summary>
            对象源类型
            </summary>
        </member>
        <member name="P:Masuit.Tools.Mapping.Core.MapperConfigurationBase.TargetType">
            <summary>
            对象目标类型
            </summary>
        </member>
        <member name="P:Masuit.Tools.Mapping.Core.MapperConfigurationBase.MemberToMapForNew">
            <summary>
            获取mapper映射成员
            </summary>
        </member>
        <member name="P:Masuit.Tools.Mapping.Core.MapperConfigurationBase.Name">
            <summary>
            mapper别名
            </summary>
        </member>
        <member name="M:Masuit.Tools.Mapping.Core.MapperConfigurationBase.#ctor(System.Type,System.Type,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="source">源类型</param>
            <param name="destination">目标类型</param>
            <param name="paramName">属性名</param>
            <param name="name">别名</param>
        </member>
        <member name="M:Masuit.Tools.Mapping.Core.MapperConfigurationBase.GetDelegate">
            <summary>
            获取mapper委托
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Mapping.Core.MapperConfigurationBase.GetDelegateForExistingTarget">
            <summary>
            获取现有目标类型的委托。
            </summary>
            <exception cref="T:Masuit.Tools.Mapping.Exceptions.MapperNotInitializedException"></exception>
        </member>
        <member name="M:Masuit.Tools.Mapping.Core.MapperConfigurationBase.GetGenericLambdaExpression">
            <summary>
            获取泛型的Lambda表达式
            </summary>
        </member>
        <member name="M:Masuit.Tools.Mapping.Core.MapperConfigurationBase.GetDestinationType">
            <summary>
            获取目标类型的实际类型
            </summary>
        </member>
        <member name="M:Masuit.Tools.Mapping.Core.MapperConfigurationBase.IgnoreBase``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            忽略目标类型的属性
            </summary>
            <typeparam name="TDest">对象源类型</typeparam>
            <typeparam name="TProperty">对象目标类型</typeparam>
            <param name="propertyDest">目标对象的属性</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Mapping.Core.MapperConfigurationBase.GetMapper(System.Type,System.Type,System.Boolean,System.String)">
            <summary>
            获取映射器实例
            </summary>
            <param name="typeOfSource">源类型</param>
            <param name="typeOfTarget">目标类型</param>
            <param name="throwExceptionOnNoFound">如果没找到是否需要抛出异常</param>
            <param name="name">mapper别名</param>
            <returns></returns>
            <exception cref="T:Masuit.Tools.Mapping.Exceptions.NoFoundMapperException"></exception>
        </member>
        <member name="M:Masuit.Tools.Mapping.Core.MapperConfigurationBase.CreateCommonMember">
            <summary>
            创建公共成员
            </summary>
        </member>
        <member name="M:Masuit.Tools.Mapping.Core.MapperConfigurationBase.CheckAndConfigureMapping(System.Tuple{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.String}@)">
            <summary>
            检查并配置mapper
            </summary>
            <param name="configExpression">配置表达式树</param>
            <exception cref="T:Masuit.Tools.Mapping.Exceptions.NotSameTypePropertyException">
            </exception>
            <exception cref="T:Masuit.Tools.Mapping.Exceptions.ReadOnlyPropertyException"></exception>
        </member>
        <member name="M:Masuit.Tools.Mapping.Core.MapperConfigurationBase.CheckAndRemoveMemberDest(System.String)">
            <summary>
            检查并移除目标成员
            </summary>
            <param name="properyName">属性名</param>
        </member>
        <member name="M:Masuit.Tools.Mapping.Core.MapperConfigurationBase.GetMemberInitExpression">
            <summary>
            获取成员初始化表达式。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Mapping.Core.MapperConfigurationBase.CreateMemberBinding(System.Linq.Expressions.Expression,System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            创建成员绑定。
            </summary>
            <param name="propertyExpression">属性表达式</param>
            <param name="propertyTarget">目标属性</param>
            <param name="checkIfNull">是否检查null值</param>
        </member>
        <member name="M:Masuit.Tools.Mapping.Core.MapperConfigurationBase.ForMemberBase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.String)">
            <summary>
            将表达式源的映射分配给属性目标。
            </summary>
            <param name="getPropertySource">属性源类型</param>
            <param name="getPropertyDest">属性目标类型</param>
            <param name="checkIfNull">是否检查null值</param>
            <param name="name">要使用的映射器的别名</param>
        </member>
        <member name="M:Masuit.Tools.Mapping.Core.MapperConfigurationBase.GetPropertyInfo(System.Linq.Expressions.Expression)">
            <summary>
            获取属性信息。
            </summary>
            <param name="propertyExpression">属性表达式树</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException">
            这种表达方式不承担职责，或者这种类型的表达式是无效的
            </exception>
        </member>
        <member name="M:Masuit.Tools.Mapping.Core.MapperConfigurationBase.CreateMemberAssignementForExistingTarget">
            <summary>
            为现有目标对象创建成员
            </summary>
        </member>
        <member name="M:Masuit.Tools.Mapping.Core.MapperConfigurationBase.CreateMappingExpression(System.Func{System.Type,System.Object})">
            <summary>
            创建映射表达式树
            </summary>
            <param name="constructor"></param>
        </member>
        <member name="M:Masuit.Tools.Mapping.Core.MapperConfigurationBase.GetSortedExpression(System.String)">
            <summary>
            获取排序表达式树
            </summary>
            <param name="propertySource">属性名</param>
            <returns></returns>
        </member>
        <member name="T:Masuit.Tools.Mapping.Core.MapperConfigurationCollectionContainer">
            <summary>
            单例存储映射器。
            </summary>
            <remarks>不需要单例，因为适用于所有线程。</remarks>
        </member>
        <member name="P:Masuit.Tools.Mapping.Core.MapperConfigurationCollectionContainer.Instance">
            <summary>
            mapper映射容器
            </summary>
        </member>
        <member name="P:Masuit.Tools.Mapping.Core.MapperConfigurationCollectionContainer.Count">
            <summary>
            count
            </summary>
        </member>
        <member name="P:Masuit.Tools.Mapping.Core.MapperConfigurationCollectionContainer.Item(System.Int32)">
            <summary>
            索引器
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Mapping.Core.MapperConfigurationCollectionContainer.Find(System.Type,System.Type,System.String)">
            <summary>
            查找指定的源。
            </summary>
            <param name="source">源类型</param>
            <param name="target">目标对象</param>
            <param name="name">别名</param>
        </member>
        <member name="M:Masuit.Tools.Mapping.Core.MapperConfigurationCollectionContainer.Exists(System.Func{Masuit.Tools.Mapping.Core.MapperConfigurationBase,System.Boolean})">
            <summary>
            是否存在谓词的映射。
            </summary>
            <param name="match">条件表达式</param>
        </member>
        <member name="M:Masuit.Tools.Mapping.Core.MapperConfigurationCollectionContainer.RemoveAt(System.Int32)">
            <summary>
            移除指定的元素
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Masuit.Tools.Mapping.Core.MapperConfigurationCollectionContainer.Clear">
            <summary>
            清除
            </summary>
        </member>
        <member name="M:Masuit.Tools.Mapping.Core.MapperConfigurationCollectionContainer.Add(Masuit.Tools.Mapping.Core.MapperConfigurationBase)">
            <summary>
            添加
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Masuit.Tools.Mapping.Core.MapperConfigurationCollectionContainer.GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Mapping.Core.MapperConfigurationCollectionContainer.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns></returns>
        </member>
        <member name="T:Masuit.Tools.Mapping.Core.PropertiesNotMapped">
            <summary>
            未映射的属性的处理结果。
            </summary>
        </member>
        <member name="P:Masuit.Tools.Mapping.Core.PropertiesNotMapped.SourceProperties">
            <summary>
            获取未映射的源属性。
            </summary>
        </member>
        <member name="P:Masuit.Tools.Mapping.Core.PropertiesNotMapped.TargetProperties">
            <summary>
            获取未映射的目标属性。
            </summary>
        </member>
        <member name="M:Masuit.Tools.Mapping.Core.PropertiesNotMapped.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:Masuit.Tools.Mapping.Exceptions.MapperExceptionBase">
            <summary>
            mapper异常基类
            </summary>
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.MapperExceptionBase.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="exceptionMessage">异常信息</param>
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.MapperExceptionBase.#ctor">
            <summary>
            无参构造函数
            </summary>
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.MapperExceptionBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数
            </summary>
            <param name="serializer">序列化信息</param>
            <param name="context">上下文</param>
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.MapperExceptionBase.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="exceptionMessage">异常信息</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.MapperExceptionBase.ValideParameter(System.String,System.Boolean[])">
            <summary>
            验证参数
            </summary>
            <param name="message">消息</param>
            <param name="conditions">条件</param>
            <returns>异常信息</returns>
        </member>
        <member name="T:Masuit.Tools.Mapping.Exceptions.MapperExistException">
            <summary>
            映射已存在时的异常
            </summary>
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.MapperExistException.#ctor(System.Type,System.Type)">
            <summary>
            构造函数
            </summary>
            <param name="source">源类型</param>
            <param name="dest">目标类型</param>
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.MapperExistException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.MapperExistException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="exceptionMessage">异常信息</param>
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.MapperExistException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数
            </summary>
            <param name="serializer">序列化信息</param>
            <param name="context">上下文</param>
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.MapperExistException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="exceptionMessage">异常信息</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="T:Masuit.Tools.Mapping.Exceptions.MapperNotInitializedException">
            <summary>
            映射未初始化时的异常
            </summary>
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.MapperNotInitializedException.#ctor(System.Type,System.Type)">
            <summary>
            构造函数
            </summary>
            <param name="typeSource">源类型</param>
            <param name="typeDest">目标类型</param>
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.MapperNotInitializedException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.MapperNotInitializedException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="exceptionMessage">异常信息</param>
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.MapperNotInitializedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数
            </summary>
            <param name="serializer">序列化信息</param>
            <param name="context">上下文</param>
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.MapperNotInitializedException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="exceptionMessage">异常信息</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="T:Masuit.Tools.Mapping.Exceptions.NoActionAfterMappingException">
            <summary>
            无法执行任何操作时的异常
            </summary>
            <seealso cref="T:Masuit.Tools.Mapping.Exceptions.MapperExceptionBase" />
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.NoActionAfterMappingException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.NoActionAfterMappingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数
            </summary>
            <param name="serializer">序列化信息</param>
            <param name="context">上下文</param>
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.NoActionAfterMappingException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="exceptionMessage">异常信息</param>
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.NoActionAfterMappingException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="exceptionMessage">异常信息</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="T:Masuit.Tools.Mapping.Exceptions.NoFoundMapperException">
            <summary>
            未找到映射关系时出现异常
            </summary>
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.NoFoundMapperException.#ctor(System.Type,System.Type)">
            <summary>
            构造函数
            </summary>
            <param name="source">源类型</param>
            <param name="dest">目标类型</param>
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.NoFoundMapperException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">别名</param>
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.NoFoundMapperException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.NoFoundMapperException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数
            </summary>
            <param name="serializer">序列化信息</param>
            <param name="context">上下文</param>
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.NoFoundMapperException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="exceptionMessage">异常信息</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="T:Masuit.Tools.Mapping.Exceptions.NotSameTypePropertyException">
            <summary>
            当属性不是同一类型或找不到映射器时出现异常
            </summary>
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.NotSameTypePropertyException.#ctor(System.Type,System.Type)">
            <summary>
            构造函数
            </summary>
            <param name="typeSource">源类型</param>
            <param name="typeDest">目标类型</param>
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.NotSameTypePropertyException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.NotSameTypePropertyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数
            </summary>
            <param name="serializer">序列化信息</param>
            <param name="context">上下文</param>
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.NotSameTypePropertyException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="exceptionMessage">异常信息</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.NotSameTypePropertyException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:Masuit.Tools.Mapping.Exceptions.PropertyNoExistException">
            <summary>
            找不到属性时出现异常
            </summary>
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.PropertyNoExistException.#ctor(System.String,System.Type)">
            <summary>
            构造函数
            </summary>
            <param name="propertyName">属性名</param>
            <param name="typeObject">对象类型</param>
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.PropertyNoExistException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.PropertyNoExistException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="exceptionMessage">异常信息</param>
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.PropertyNoExistException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数
            </summary>
            <param name="serializer">序列化信息</param>
            <param name="context">上下文</param>
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.PropertyNoExistException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="exceptionMessage">异常信息</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="T:Masuit.Tools.Mapping.Exceptions.ReadOnlyPropertyException">
            <summary>
            只读属性的异常
            </summary>
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.ReadOnlyPropertyException.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            构造函数
            </summary>
            <param name="property">属性</param>
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.ReadOnlyPropertyException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.ReadOnlyPropertyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数
            </summary>
            <param name="serializer">序列化信息</param>
            <param name="context">上下文</param>
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.ReadOnlyPropertyException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="exceptionMessage">异常信息</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="M:Masuit.Tools.Mapping.Exceptions.ReadOnlyPropertyException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="exceptionMessage">异常信息</param>
        </member>
        <member name="T:Masuit.Tools.Mapping.ExpressionCpoier">
            <summary>
            表达式树复制对象
            </summary>
        </member>
        <member name="M:Masuit.Tools.Mapping.ExpressionCpoier.Copy``1(``0)">
            <summary>
            复制一个新实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Masuit.Tools.Mapping.ExpressionMapper">
            <summary>
            mapper的基类
            </summary>
        </member>
        <member name="M:Masuit.Tools.Mapping.ExpressionMapper.Map``2(``0,System.String)">
            <summary>
            映射指定的源。
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TDest">目标类型</typeparam>
            <param name="source">源对象</param>
            <param name="name">别名</param>
            <returns>
            目标对象的新实例
            </returns>
        </member>
        <member name="M:Masuit.Tools.Mapping.ExpressionMapper.Map``2(``0,``1,System.String)">
            <summary>
            将指定的源映射到目标。
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TDest">目标类型</typeparam>
            <param name="source">源对象</param>
            <param name="target">目标对象</param>
            <param name="name">别名</param>
        </member>
        <member name="M:Masuit.Tools.Mapping.ExpressionMapper.GetQueryExpression``2">
            <summary>
            获取查询表达式树
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TDest">目标类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Mapping.ExpressionMapper.CreateMap``2(System.String)">
            <summary>
            创建mapper对象
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TDest">目标类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Mapping.ExpressionMapper.ConstructServicesUsing(System.Func{System.Type,System.Object})">
            <summary>
            表示使用的依赖注入服务
            </summary>
            <param name="constructor">构造函数委托</param>
        </member>
        <member name="M:Masuit.Tools.Mapping.ExpressionMapper.Reset">
            <summary>
            重置mapper
            </summary>
        </member>
        <member name="M:Masuit.Tools.Mapping.ExpressionMapper.GetMapper``2(System.String)">
            <summary>
            获取mapper实例
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TDest">目标类型</typeparam>
            <param name="name">别名</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Mapping.ExpressionMapper.Initialize">
            <summary>
            初始化mapper
            </summary>
        </member>
        <member name="M:Masuit.Tools.Mapping.ExpressionMapper.GetQuery``2">
            <summary>
            获取mapper的委托
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TDest">目标类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Mapping.ExpressionMapper.GetPropertiesNotMapped``2(System.String)">
            <summary>
            获取未映射的属性
            </summary>
        </member>
        <member name="T:Masuit.Tools.Mapping.Extensions.ExpressionExtentions">
             <summary>
            表达式树扩展
             </summary>
        </member>
        <member name="M:Masuit.Tools.Mapping.Extensions.ExpressionExtentions.ConvertTo``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Type)">
            <summary>
            转换
            </summary>
            <typeparam name="TFrom">源类型</typeparam>
            <param name="from">来源</param>
            <param name="toType">目标类型</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Mapping.Extensions.ExpressionExtentions.ConvertTo``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Type)">
            <summary>
            转换
            </summary>
            <typeparam name="TFrom">源类型</typeparam>
            <param name="from">来源</param>
            <param name="toType">目标类型</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Mapping.Extensions.ExpressionExtentions.ConvertTo``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            转换Lambda表达式树
            </summary>
            <typeparam name="TFrom">源类型</typeparam>
            <typeparam name="TTo">目标类型</typeparam>
            <param name="from">来源</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Mapping.Extensions.ExpressionExtentions.ConvertTo``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            转换表达式树
            </summary>
            <typeparam name="TFrom">源类型的表达式树</typeparam>
            <typeparam name="TTo">目标类型的表达式树</typeparam>
            <param name="from">源类型的表达式树</param>
            <returns>表达式转换或如果没有找到映射原始表达式。</returns>
        </member>
        <member name="T:Masuit.Tools.Mapping.Extensions.QueryableExtentions">
            <summary>
            IQueryable的扩展
            </summary>
        </member>
        <member name="M:Masuit.Tools.Mapping.Extensions.QueryableExtentions.OrderBy``2(System.Linq.IQueryable{``0},System.String)">
            <summary>
            根据键按升序对序列的元素进行排序。
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TDest">目标类型</typeparam>
            <param name="query">分类化的序列值</param>
            <param name="sortedPropertyDestName">目标属性的名称</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Mapping.Extensions.QueryableExtentions.OrderByDescending``2(System.Linq.IQueryable{``0},System.String)">
            <summary>
            根据键按降序对序列的元素进行排序。
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TDest">目标类型</typeparam>
            <param name="query">分类化的序列值</param>
            <param name="sortedPropertyDestName">目标属性的名称</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Mapping.Extensions.QueryableExtentions.ThenBy``2(System.Linq.IQueryable{``0},System.String)">
            <summary>
             根据键按升序对序列的元素进行排序。
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TDest">目标类型</typeparam>
            <param name="query">分类化的序列值</param>
            <param name="sortedPropertyDestName">目标属性的名称</param>
        </member>
        <member name="M:Masuit.Tools.Mapping.Extensions.QueryableExtentions.ThenByDescending``2(System.Linq.IQueryable{``0},System.String)">
            <summary>
            根据键按降序对序列的元素进行排序。
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TDest">目标类型</typeparam>
            <param name="query">分类化的序列值</param>
            <param name="sortedPropertyDestName">目标属性的名称</param>
        </member>
        <member name="M:Masuit.Tools.Mapping.Extensions.QueryableExtentions.ProjectTo``2(System.Linq.IQueryable{``0})">
            <summary>
            通过合并目标对象将序列的每个元素投影到新表单中。
            </summary>
            <typeparam name="TSource">源类型.</typeparam>
            <typeparam name="TDest">目标类型.</typeparam>
            <param name="query">分类化的序列值</param>
        </member>
        <member name="M:Masuit.Tools.Mapping.Extensions.QueryableExtentions.ProjectTo``2(System.Linq.IQueryable{``0},System.String)">
            <summary>
            通过合并目标对象将序列的每个元素投影到新表单中。
            </summary>
            <typeparam name="TSource">源类型.</typeparam>
            <typeparam name="TDest">目标类型.</typeparam>
            <param name="query">分类化的序列值</param>
            <param name="mapperName">mapper别名</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Mapping.Extensions.QueryableExtentions.WhereTo``2(System.Linq.IQueryable{``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据谓词过滤一系列值。
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TDest">目标类型</typeparam>
            <param name="query">分类化的序列值</param>
            <param name="predicate">用于根据条件测试每个元素的功能。</param>
            <returns></returns>
        </member>
        <member name="T:Masuit.Tools.Mapping.Helper.MapperHelper">
            <summary>
            mapper帮助类
            </summary>
        </member>
        <member name="M:Masuit.Tools.Mapping.Helper.MapperHelper.GetDefaultValue(System.Type)">
            <summary>
            获取类型的默认值。
            </summary>
            <param name="typeObject">对象类型</param>
        </member>
        <member name="T:Masuit.Tools.Mapping.Visitor.ConverterExpressionVisitor">
            <summary>
            将表达式从源转换为目标的访问者表达式
            </summary>
        </member>
        <member name="M:Masuit.Tools.Mapping.Visitor.ConverterExpressionVisitor.#ctor(System.Collections.Generic.Dictionary{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression},System.Type)">
            <summary>
            构造函数
            </summary>
            <param name="parameterMap"></param>
            <param name="typeDestination"></param>
        </member>
        <member name="M:Masuit.Tools.Mapping.Visitor.ConverterExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            
            </summary>
            <param name="node">访问表达式树</param>
            <returns>
            改变表达式，如果它或它的任何子表达式被修改; 否则，返回原始表达式。
            </returns>
        </member>
        <member name="M:Masuit.Tools.Mapping.Visitor.ConverterExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            将表达式分布在此类中更专业的访问方法之一。
            </summary>
            <param name="node">访问表达式树</param>
            <returns>
            改变表达式，如果它或它的任何子表达式被修改; 否则，返回原始表达式。
            </returns>
        </member>
        <member name="M:Masuit.Tools.Mapping.Visitor.ConverterExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
            访问子表达式树
            </summary>
            <param name="node">访问表达式树</param>
            <returns>
            改变表达式，如果它或它的任何子表达式被修改; 否则，返回原始表达式。
            </returns>
        </member>
        <member name="T:Masuit.Tools.Mapping.Visitor.MapperExpressionVisitor">
            <summary>
            mapper表达式树访问器
            </summary>
        </member>
        <member name="M:Masuit.Tools.Mapping.Visitor.MapperExpressionVisitor.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            构造函数
            </summary>
            <param name="paramClassSource"></param>
        </member>
        <member name="M:Masuit.Tools.Mapping.Visitor.MapperExpressionVisitor.Visit(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            将表达式分布在此类中更专一的访问方法之一。
            </summary>
            <param name="node">访问表达式树</param>
            <param name="checkIfNullity">检查null值</param>
            <returns>
            改变表达式，如果它或它的任何子表达式被修改; 否则，返回原始表达式。
            </returns>
        </member>
        <member name="M:Masuit.Tools.Mapping.Visitor.MapperExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            访问表达式树
            </summary>
            <param name="node">表达式树节点</param>
            <returns>
            改变表达式，如果它或它的任何子表达式被修改; 否则，返回原始表达式。
            </returns>
        </member>
        <member name="M:Masuit.Tools.Mapping.Visitor.MapperExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
            访问子表达式树
            </summary>
            <param name="node">表达式树节点</param>
            <returns>
            改变表达式，如果它或它的任何子表达式被修改; 否则，返回原始表达式。
            </returns>
        </member>
        <member name="M:Masuit.Tools.Mapping.Visitor.MapperExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
             访问子表达式树
            </summary>
            <param name="node">表达式树节点</param>
            <returns>
            改变表达式，如果它或它的任何子表达式被修改; 否则，返回原始表达式。
            </returns>
        </member>
        <member name="T:Masuit.Tools.Media.ImageUtilities">
            <summary>
            图片处理
            </summary>
        </member>
        <member name="M:Masuit.Tools.Media.ImageUtilities.CutForSquare(System.IO.Stream,System.String,System.Int32,System.Int32)">
            <summary>
            正方型裁剪
            以图片中心为轴心，截取正方型，然后等比缩放
            用于头像处理
            </summary>
            <param name="fromFile">原图Stream对象</param>
            <param name="fileSaveUrl">缩略图存放地址</param>
            <param name="side">指定的边长（正方型）</param>
            <param name="quality">质量（范围0-100）</param>
        </member>
        <member name="M:Masuit.Tools.Media.ImageUtilities.CutForCustom(System.IO.Stream,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            指定长宽裁剪
            按模版比例最大范围的裁剪图片并缩放至模版尺寸
            </summary>
            <param name="fromFile">原图Stream对象</param>
            <param name="fileSaveUrl">保存路径</param>
            <param name="maxWidth">最大宽(单位:px)</param>
            <param name="maxHeight">最大高(单位:px)</param>
            <param name="quality">质量（范围0-100）</param>
        </member>
        <member name="M:Masuit.Tools.Media.ImageUtilities.ZoomAuto(System.IO.Stream,System.String,System.Double,System.Double,System.String,System.String)">
            <summary>
            图片等比缩放
            </summary>
            <param name="fromFile">原图Stream对象</param>
            <param name="savePath">缩略图存放地址</param>
            <param name="targetWidth">指定的最大宽度</param>
            <param name="targetHeight">指定的最大高度</param>
            <param name="watermarkText">水印文字(为""表示不使用水印)</param>
            <param name="watermarkImage">水印图片路径(为""表示不使用水印)</param>
        </member>
        <member name="M:Masuit.Tools.Media.ImageUtilities.IsWebImage(System.String)">
            <summary>
            判断文件类型是否为WEB格式图片
            (注：JPG,GIF,BMP,PNG)
            </summary>
            <param name="contentType">HttpPostedFile.ContentType</param>
            <returns>是否为WEB格式图片</returns>
        </member>
        <member name="M:Masuit.Tools.Media.ImageUtilities.CutImage(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            裁剪图片 -- 用GDI+   
            </summary>
            <param name="b">原始Bitmap</param>
            <param name="rec">裁剪区域</param>
            <returns>剪裁后的Bitmap</returns>
        </member>
        <member name="M:Masuit.Tools.Media.ImageUtilities.ResizeImage(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>  
             Resize图片   
            </summary>  
            <param name="bmp">原始Bitmap </param>  
            <param name="newWidth">新的宽度</param>  
            <param name="newHeight">新的高度</param>  
            <returns>处理以后的图片</returns>  
        </member>
        <member name="M:Masuit.Tools.Media.ImageUtilities.CutAndResize(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>
            裁剪并缩放
            </summary>
            <param name="bmp">原始图片</param>
            <param name="rec">裁剪的矩形区域</param>
            <param name="newWidth">新的宽度</param>  
            <param name="newHeight">新的高度</param>  
            <returns>处理以后的图片</returns>
        </member>
        <member name="M:Masuit.Tools.Media.ImageUtilities.CompressImage(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            无损压缩图片
            </summary>
            <param name="sFile">原图片地址</param>
            <param name="dFile">压缩后保存图片地址</param>
            <param name="flag">压缩质量（数字越小压缩率越高）1-100</param>
            <param name="size">压缩后图片的最大大小</param>
            <param name="sfsc">是否是第一次调用</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Media.ImageUtilities.CompressImage(System.IO.Stream,System.IO.Stream,System.Int32,System.Int32,System.Boolean)">
            <summary>
            无损压缩图片
            </summary>
            <param name="src">原图片文件流</param>
            <param name="dest">压缩后图片文件流</param>
            <param name="flag">压缩质量（数字越小压缩率越高）1-100</param>
            <param name="size">压缩后图片的最大大小</param>
            <param name="sfsc">是否是第一次调用</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Media.ImageUtilities.MakeThumbnail(System.Drawing.Image,System.String,System.Int32,System.Int32,Masuit.Tools.Media.ThumbnailCutMode)">
            <summary>
            生成缩略图
            </summary>
            <param name="originalImage">原图</param>
            <param name="thumbnailPath">缩略图路径（物理路径）</param>
            <param name="width">缩略图宽度</param>
            <param name="height">缩略图高度</param>
            <param name="mode">生成缩略图的方式</param>    
        </member>
        <member name="M:Masuit.Tools.Media.ImageUtilities.LDPic(System.Drawing.Bitmap,System.Int32,System.Int32,System.Int32)">
            <summary>
            调整光暗
            </summary>
            <param name="mybm">原始图片</param>
            <param name="width">原始图片的长度</param>
            <param name="height">原始图片的高度</param>
            <param name="val">增加或减少的光暗值</param>
        </member>
        <member name="M:Masuit.Tools.Media.ImageUtilities.RePic(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            反色处理
            </summary>
            <param name="mybm">原始图片</param>
            <param name="width">原始图片的长度</param>
            <param name="height">原始图片的高度</param>
        </member>
        <member name="M:Masuit.Tools.Media.ImageUtilities.Relief(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            浮雕处理
            </summary>
            <param name="oldBitmap">原始图片</param>
            <param name="width">原始图片的长度</param>
            <param name="height">原始图片的高度</param>
        </member>
        <member name="M:Masuit.Tools.Media.ImageUtilities.ResizeImageAsync(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            拉伸图片
            </summary>
            <param name="bmp">原始图片</param>
            <param name="newW">新的宽度</param>
            <param name="newH">新的高度</param>
        </member>
        <member name="M:Masuit.Tools.Media.ImageUtilities.FilPic(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            滤色处理
            </summary>
            <param name="mybm">原始图片</param>
            <param name="width">原始图片的长度</param>
            <param name="height">原始图片的高度</param>
        </member>
        <member name="M:Masuit.Tools.Media.ImageUtilities.RevPicLR(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            左右翻转
            </summary>
            <param name="mybm">原始图片</param>
            <param name="width">原始图片的长度</param>
            <param name="height">原始图片的高度</param>
        </member>
        <member name="M:Masuit.Tools.Media.ImageUtilities.RevPicUD(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            上下翻转
            </summary>
            <param name="mybm">原始图片</param>
            <param name="width">原始图片的长度</param>
            <param name="height">原始图片的高度</param>
        </member>
        <member name="M:Masuit.Tools.Media.ImageUtilities.Compress(System.Drawing.Image,System.String)">
            <summary>
            压缩到指定尺寸
            </summary>
            <param name="img"></param>
            <param name="newfile">新文件</param>
        </member>
        <member name="M:Masuit.Tools.Media.ImageUtilities.Gray(System.Drawing.Color)">
            <summary>
            图片灰度化
            </summary>
            <param name="c">输入颜色</param>
            <returns>输出颜色</returns>
        </member>
        <member name="M:Masuit.Tools.Media.ImageUtilities.BWPic(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            转换为黑白图片
            </summary>
            <param name="mybm">要进行处理的图片</param>
            <param name="width">图片的长度</param>
            <param name="height">图片的高度</param>
        </member>
        <member name="M:Masuit.Tools.Media.ImageUtilities.GetFrames(System.Drawing.Image,System.String)">
            <summary>
            获取图片中的各帧
            </summary>
            <param name="gif">源gif</param>
            <param name="pSavedPath">保存路径</param>
        </member>
        <member name="M:Masuit.Tools.Media.ImageUtilities.SaveDataUriAsImageFile(System.String)">
            <summary>
            将dataUri保存为图片
            </summary>
            <param name="source">dataUri数据源</param>
            <returns></returns>
            <exception cref="T:System.Exception">操作失败。</exception>
        </member>
        <member name="M:Masuit.Tools.Media.ImageUtilities.UploadImageAsync(System.IO.Stream)">
            <summary>
            上传图片到百度图床
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="T:Masuit.Tools.Media.ThumbnailCutMode">
            <summary>
            图像裁剪模式
            </summary>
        </member>
        <member name="F:Masuit.Tools.Media.ThumbnailCutMode.LockHeight">
            <summary>
            锁定高度
            </summary>
        </member>
        <member name="F:Masuit.Tools.Media.ThumbnailCutMode.LockWidth">
            <summary>
            锁定宽度
            </summary>
        </member>
        <member name="F:Masuit.Tools.Media.ThumbnailCutMode.Fixed">
            <summary>
            固定宽高
            </summary>
        </member>
        <member name="F:Masuit.Tools.Media.ThumbnailCutMode.Cut">
            <summary>
            裁剪
            </summary>
        </member>
        <member name="T:Masuit.Tools.Models.BaiduIP">
            <summary>
            百度IP接口的信息
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.BaiduIP.Address">
            <summary>
            基本信息
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.BaiduIP.AddressInfo">
            <summary>
            基本地理信息
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.BaiduIP.Status">
            <summary>
            返回状态，0正常，1出错
            </summary>
        </member>
        <member name="T:Masuit.Tools.Models.AddressInfo">
            <summary>
            基本地理信息
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.AddressInfo.Address">
            <summary>
            基本地址
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.AddressInfo.LatiLongitude">
            <summary>
            经纬度
            </summary>
        </member>
        <member name="T:Masuit.Tools.Models.LatiLongitude">
            <summary>
            经纬度
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.LatiLongitude.X">
            <summary>
            经度
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.LatiLongitude.Y">
            <summary>
            纬度
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.Email.Username">
            <summary>
            发件人用户名
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.Email.Password">
            <summary>
            发件人邮箱密码
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.Email.SmtpPort">
            <summary>
            发送服务器端口号，默认25
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.Email.SmtpServer">
            <summary>
            发送服务器地址
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.Email.Subject">
            <summary>
            邮件标题
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.Email.Body">
            <summary>
            邮件正文
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.Email.Tos">
            <summary>
            收件人，多个收件人用英文逗号隔开
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.Email.EnableSsl">
            <summary>
            是否启用SSL，默认已启用
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.Email.GetClient">
            <summary>
            邮件消息对象
            </summary>
        </member>
        <member name="M:Masuit.Tools.Models.Email.SendAsync(System.Action{System.String})">
            <summary>
            使用异步发送邮件
            </summary>
            <param name="completedCallback">邮件发送后的回调方法</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Models.Email.Send">
            <summary>
            使用同步发送邮件
            </summary>
        </member>
        <member name="M:Masuit.Tools.Models.Email.SendCompletedCallback(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            异步操作完成后执行回调方法
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Masuit.Tools.Models.IspInfo">
            <summary>
            ISP信息
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.IspInfo.ISPName">
            <summary>
            运营商
            </summary>
        </member>
        <member name="T:Masuit.Tools.Models.PhysicsAddress">
            <summary>
            详细地理信息
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.PhysicsAddress.Status">
            <summary>
            返回状态，0正常，1出错
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.PhysicsAddress.AddressResult">
            <summary>
            返回结果集
            </summary>
        </member>
        <member name="T:Masuit.Tools.Models.AddressResult">
            <summary>
            返回结果集
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.AddressResult.Location">
            <summary>
            经纬度
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.AddressResult.FormattedAddress">
            <summary>
            详细地址
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.AddressResult.Business">
            <summary>
            商业地址
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.AddressResult.AddressComponent">
            <summary>
            地理信息成分
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.AddressResult.Pois">
            <summary>
            参考地址
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.AddressResult.SematicDescription">
            <summary>
            语义描述
            </summary>
        </member>
        <member name="T:Masuit.Tools.Models.Location">
            <summary>
            经纬度
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.Location.Lng">
            <summary>
            经度
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.Location.Lat">
            <summary>
            纬度
            </summary>
        </member>
        <member name="T:Masuit.Tools.Models.AddressComponent">
            <summary>
            地理信息成分
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.AddressComponent.Country">
            <summary>
            国家
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.AddressComponent.CountryCode">
            <summary>
            国家代码
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.AddressComponent.Province">
            <summary>
            省
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.AddressComponent.City">
            <summary>
            市
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.AddressComponent.District">
            <summary>
            区
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.AddressComponent.Street">
            <summary>
            街道
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.AddressComponent.StreetNumber">
            <summary>
            门牌号
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.AddressComponent.Direction">
            <summary>
            方位
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.AddressComponent.Distance">
            <summary>
            距离
            </summary>
        </member>
        <member name="T:Masuit.Tools.Models.Pois">
            <summary>
            参考位置
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.Pois.AddressDetail">
            <summary>
            地理位置详细
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.Pois.Direction">
            <summary>
            方位
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.Pois.Distance">
            <summary>
            距离
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.Pois.Name">
            <summary>
            建筑物名字
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.Pois.PoiType">
            <summary>
            建筑物类型
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.Pois.Point">
            <summary>
            经纬度
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.Pois.Tag">
            <summary>
            标签
            </summary>
        </member>
        <member name="T:Masuit.Tools.Models.TaobaoIP">
            <summary>
            淘宝IP接口信息
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.TaobaoIP.Code">
            <summary>
            返回状态码
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.TaobaoIP.IpData">
            <summary>
            数据
            </summary>
        </member>
        <member name="T:Masuit.Tools.Models.IPData">
            <summary>
            淘宝IP接口信息
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.IPData.Country">
            <summary>
            国家
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.IPData.Region">
            <summary>
            省
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.IPData.City">
            <summary>
            市
            </summary>
        </member>
        <member name="P:Masuit.Tools.Models.IPData.Isp">
            <summary>
            ISP
            </summary>
        </member>
        <member name="T:Masuit.Tools.Net.FtpClient">
            <summary>
            FTP客户端操作类
            </summary>
        </member>
        <member name="P:Masuit.Tools.Net.FtpClient.FtpServer">
            <summary>
            Ftp服务器ip
            </summary>
        </member>
        <member name="P:Masuit.Tools.Net.FtpClient.Username">
            <summary>
            Ftp 指定用户名
            </summary>
        </member>
        <member name="P:Masuit.Tools.Net.FtpClient.Password">
            <summary>
            Ftp 指定用户密码
            </summary>
        </member>
        <member name="M:Masuit.Tools.Net.FtpClient.GetAnonymousClient(System.String)">
            <summary>
            获取一个匿名登录的ftp客户端
            </summary>
            <param name="serverIp">服务器IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Net.FtpClient.GetClient(System.String,System.String,System.String)">
            <summary>
            获取一个匿名登录的ftp客户端
            </summary>
            <param name="serverIp">服务器ip</param>
            <param name="username">用户名</param>
            <param name="password">密码</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Net.FtpClient.Download(System.String,System.String,System.Boolean,System.Action{System.Int32,System.Int32})">
            <summary>
            从FTP服务器下载文件，指定本地路径和本地文件名
            </summary>
            <param name="remoteFileName">远程文件名</param>
            <param name="localFileName">保存本地的文件名（包含路径）</param>
            <param name="ifCredential">是否启用身份验证（false：表示允许用户匿名下载）</param>
            <param name="updateProgress">报告进度的处理(第一个参数：总大小，第二个参数：当前进度)</param>
        </member>
        <member name="M:Masuit.Tools.Net.FtpClient.BrokenDownload(System.String,System.String,System.Boolean,System.Int64,System.Action{System.Int32,System.Int32})">
            <summary>
            从FTP服务器下载文件，指定本地路径和本地文件名（支持断点下载）
            </summary>
            <param name="remoteFileName">远程文件名</param>
            <param name="localFileName">保存本地的文件名（包含路径）</param>
            <param name="ifCredential">是否启用身份验证（false：表示允许用户匿名下载）</param>
            <param name="size">已下载文件流大小</param>
            <param name="updateProgress">报告进度的处理(第一个参数：总大小，第二个参数：当前进度)</param>
        </member>
        <member name="M:Masuit.Tools.Net.FtpClient.Download(System.String,System.String,System.Boolean,System.Boolean,System.Action{System.Int32,System.Int32})">
            <summary>
            从FTP服务器下载文件，指定本地路径和本地文件名
            </summary>
            <param name="remoteFileName">远程文件名</param>
            <param name="localFileName">保存本地的文件名（包含路径）</param>
            <param name="ifCredential">是否启用身份验证（false：表示允许用户匿名下载）</param>
            <param name="updateProgress">报告进度的处理(第一个参数：总大小，第二个参数：当前进度)</param>
            <param name="brokenOpen">是否断点下载：true 会在localFileName 找是否存在已经下载的文件，并计算文件流大小</param>
        </member>
        <member name="M:Masuit.Tools.Net.FtpClient.UploadFile(System.String,System.String,System.Action{System.Int32,System.Int32})">
            <summary>
            上传文件到FTP服务器
            </summary>
            <param name="relativePath">相对目录</param>
            <param name="localFullPathName">本地带有完整路径的文件名</param>
            <param name="updateProgress">报告进度的处理(第一个参数：总大小，第二个参数：当前进度)</param>
        </member>
        <member name="M:Masuit.Tools.Net.FtpClient.UploadBroken(System.String,System.String,System.Action{System.Int32,System.Int32})">
            <summary>
            上传文件到FTP服务器(断点续传)
            </summary>
            <param name="localFullPath">本地文件全路径名称：C:\Users\JianKunKing\Desktop\IronPython脚本测试工具</param>
            <param name="remoteFilepath">远程文件所在文件夹路径</param>
            <param name="updateProgress">报告进度的处理(第一个参数：总大小，第二个参数：当前进度)</param>
            <returns></returns> 
        </member>
        <member name="M:Masuit.Tools.Net.FtpClient.RemoveSpaces(System.String)">
            <summary>
            去除空格
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Net.FtpClient.GetFileSize(System.String,System.String)">
            <summary>
            获取已上传文件大小
            </summary>
            <param name="filePath">文件名称</param>
            <param name="remoteFilepath">服务器文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Net.FtpClient.GetFilesDetails(System.String)">
            <summary>
            获取当前目录下明细(包含文件和文件夹)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Net.FtpClient.GetFiles(System.String,System.String)">
            <summary>
            获取当前目录下文件列表(仅文件)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Net.FtpClient.GetDirectories(System.String)">
            <summary>
            获取当前目录下所有的文件夹列表(仅文件夹)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Net.FtpClient.Delete(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Masuit.Tools.Net.FtpClient.RemoveDirectory(System.String)">
            <summary>
            删除文件夹
            </summary>
            <param name="dirPath"></param>
        </member>
        <member name="M:Masuit.Tools.Net.FtpClient.GetFileSize(System.String)">
            <summary>
            获取指定文件大小
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Net.FtpClient.DirectoryExist(System.String)">
            <summary>
            判断当前目录下指定的子目录是否存在
            </summary>
            <param name="remoteDirPath">指定的目录名</param>
        </member>
        <member name="M:Masuit.Tools.Net.FtpClient.FileExist(System.String)">
            <summary>
            判断当前目录下指定的文件是否存在
            </summary>
            <param name="remoteFileName">远程文件名</param>
        </member>
        <member name="M:Masuit.Tools.Net.FtpClient.MakeDir(System.String,System.String)">
            <summary>
            创建文件夹
            </summary>
            <param name="relativePath">路径</param>
            <param name="newDir">新建文件夹</param>
        </member>
        <member name="M:Masuit.Tools.Net.FtpClient.Rename(System.String,System.String,System.String)">
            <summary>
            改名
            </summary>
            <param name="relativePath">相对路径</param>
            <param name="currentFilename"></param>
            <param name="newFilename"></param>
        </member>
        <member name="M:Masuit.Tools.Net.FtpClient.MoveFile(System.String,System.String,System.String)">
            <summary>
            移动文件
            </summary>
            <param name="relativePath">相对路径</param>
            <param name="currentFilename"></param>
            <param name="newDirectory"></param>
        </member>
        <member name="T:Masuit.Tools.Net.FileMergeProgressChangedEventHandler">
            <summary>
            文件合并改变事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Masuit.Tools.Net.MultiThreadDownloader">
            <summary>
            多线程下载器
            </summary>
        </member>
        <member name="P:Masuit.Tools.Net.MultiThreadDownloader.RangeAllowed">
            <summary>
            RangeAllowed
            </summary>
        </member>
        <member name="P:Masuit.Tools.Net.MultiThreadDownloader.TempFileDirectory">
            <summary>
            临时文件夹
            </summary>
        </member>
        <member name="P:Masuit.Tools.Net.MultiThreadDownloader.Url">
            <summary>
            url地址
            </summary>
        </member>
        <member name="P:Masuit.Tools.Net.MultiThreadDownloader.NumberOfParts">
            <summary>
            第几部分
            </summary>
        </member>
        <member name="P:Masuit.Tools.Net.MultiThreadDownloader.TotalBytesReceived">
            <summary>
            已接收字节数
            </summary>
        </member>
        <member name="P:Masuit.Tools.Net.MultiThreadDownloader.TotalProgress">
            <summary>
            总进度
            </summary>
        </member>
        <member name="P:Masuit.Tools.Net.MultiThreadDownloader.Size">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="P:Masuit.Tools.Net.MultiThreadDownloader.TotalSpeedInBytes">
            <summary>
            下载速度
            </summary>
        </member>
        <member name="P:Masuit.Tools.Net.MultiThreadDownloader.PartialDownloaderList">
            <summary>
            下载块
            </summary>
        </member>
        <member name="P:Masuit.Tools.Net.MultiThreadDownloader.FilePath">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="E:Masuit.Tools.Net.MultiThreadDownloader.TotalProgressChanged">
            <summary>
            总下载进度更新事件
            </summary>
        </member>
        <member name="E:Masuit.Tools.Net.MultiThreadDownloader.FileMergeProgressChanged">
            <summary>
            文件合并事件
            </summary>
        </member>
        <member name="M:Masuit.Tools.Net.MultiThreadDownloader.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            多线程下载管理器
            </summary>
            <param name="sourceUrl"></param>
            <param name="tempDir"></param>
            <param name="savePath"></param>
            <param name="numOfParts"></param>
        </member>
        <member name="M:Masuit.Tools.Net.MultiThreadDownloader.#ctor(System.String,System.String,System.Int32)">
            <summary>
            多线程下载管理器
            </summary>
            <param name="sourceUrl"></param>
            <param name="savePath"></param>
            <param name="numOfParts"></param>
        </member>
        <member name="M:Masuit.Tools.Net.MultiThreadDownloader.#ctor(System.String,System.Int32)">
            <summary>
            多线程下载管理器
            </summary>
            <param name="sourceUrl"></param>
            <param name="numOfParts"></param>
        </member>
        <member name="M:Masuit.Tools.Net.MultiThreadDownloader.WaitOrResumeAll(System.Collections.Generic.List{Masuit.Tools.Net.PartialDownloader},System.Boolean)">
            <summary>
            暂停或继续
            </summary>
            <param name="list"></param>
            <param name="wait"></param>
        </member>
        <member name="M:Masuit.Tools.Net.MultiThreadDownloader.BubbleSort(System.Collections.Generic.List{Masuit.Tools.Net.PartialDownloader})">
            <summary>
            冒泡排序
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Masuit.Tools.Net.MultiThreadDownloader.SortPDsByFrom(System.Collections.Generic.List{Masuit.Tools.Net.PartialDownloader})">
            <summary>
            Sorts the downloader by From property to merge the parts
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Net.MultiThreadDownloader.OrderByRemaining(System.Collections.Generic.List{Masuit.Tools.Net.PartialDownloader})">
            <summary>
            按剩余时间排序
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Masuit.Tools.Net.MultiThreadDownloader.GetContentLength(System.String,System.Boolean@,System.String@)">
            <summary>
            获取内容长度
            </summary>
            <param name="url"></param>
            <param name="rangeAllowed"></param>
            <param name="redirectedUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Net.MultiThreadDownloader.Pause">
            <summary>
            暂停下载
            </summary>
        </member>
        <member name="M:Masuit.Tools.Net.MultiThreadDownloader.Start">
            <summary>
            开始下载
            </summary>
        </member>
        <member name="M:Masuit.Tools.Net.MultiThreadDownloader.Resume">
            <summary>
            唤醒下载
            </summary>
        </member>
        <member name="T:Masuit.Tools.Net.PartialDownloader">
            <summary>
            部分下载器
            </summary>
        </member>
        <member name="E:Masuit.Tools.Net.PartialDownloader.DownloadPartCompleted">
            <summary>
            这部分完成事件
            </summary>
        </member>
        <member name="E:Masuit.Tools.Net.PartialDownloader.DownloadPartProgressChanged">
            <summary>
            部分下载进度改变事件
            </summary>
        </member>
        <member name="E:Masuit.Tools.Net.PartialDownloader.DownloadPartStopped">
            <summary>
            部分下载停止事件
            </summary>
        </member>
        <member name="M:Masuit.Tools.Net.PartialDownloader.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            部分块下载
            </summary>
            <param name="url"></param>
            <param name="dir"></param>
            <param name="fileGuid"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="rangeAllowed"></param>
        </member>
        <member name="M:Masuit.Tools.Net.PartialDownloader.Start">
            <summary>
            启动下载
            </summary>
        </member>
        <member name="M:Masuit.Tools.Net.PartialDownloader.Stop">
            <summary>
            下载停止
            </summary>
        </member>
        <member name="M:Masuit.Tools.Net.PartialDownloader.Wait">
            <summary>
            暂停等待下载
            </summary>
        </member>
        <member name="M:Masuit.Tools.Net.PartialDownloader.ResumeAfterWait">
            <summary>
            稍后唤醒
            </summary>
        </member>
        <member name="P:Masuit.Tools.Net.PartialDownloader.Stopped">
            <summary>
            下载已停止
            </summary>
        </member>
        <member name="P:Masuit.Tools.Net.PartialDownloader.Completed">
            <summary>
            下载已完成
            </summary>
        </member>
        <member name="P:Masuit.Tools.Net.PartialDownloader.Progress">
            <summary>
            下载进度
            </summary>
        </member>
        <member name="P:Masuit.Tools.Net.PartialDownloader.Directory">
            <summary>
            下载目录
            </summary>
        </member>
        <member name="P:Masuit.Tools.Net.PartialDownloader.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:Masuit.Tools.Net.PartialDownloader.TotalBytesRead">
            <summary>
            已读字节数
            </summary>
        </member>
        <member name="P:Masuit.Tools.Net.PartialDownloader.ContentLength">
            <summary>
            内容长度
            </summary>
        </member>
        <member name="P:Masuit.Tools.Net.PartialDownloader.RangeAllowed">
            <summary>
            RangeAllowed
            </summary>
        </member>
        <member name="P:Masuit.Tools.Net.PartialDownloader.Url">
            <summary>
            url
            </summary>
        </member>
        <member name="P:Masuit.Tools.Net.PartialDownloader.To">
            <summary>
            to
            </summary>
        </member>
        <member name="P:Masuit.Tools.Net.PartialDownloader.From">
            <summary>
            from
            </summary>
        </member>
        <member name="P:Masuit.Tools.Net.PartialDownloader.CurrentPosition">
            <summary>
            当前位置
            </summary>
        </member>
        <member name="P:Masuit.Tools.Net.PartialDownloader.RemainingBytes">
            <summary>
            剩余字节数
            </summary>
        </member>
        <member name="P:Masuit.Tools.Net.PartialDownloader.FullPath">
            <summary>
            完整路径
            </summary>
        </member>
        <member name="P:Masuit.Tools.Net.PartialDownloader.SpeedInBytes">
            <summary>
            下载速度
            </summary>
        </member>
        <member name="T:Masuit.Tools.Net.SocketClient">
            <summary>
            Socket客户端操作类
            </summary>
        </member>
        <member name="F:Masuit.Tools.Net.SocketClient.m_maxpacket">
            <summary>
            设置数据缓冲区大小 默认1024
            </summary>
        </member>
        <member name="M:Masuit.Tools.Net.SocketClient.ListenerSocket(System.Net.Sockets.TcpListener)">
            <summary>
            服务器侦听方法 返回null则说明没有链接上
            </summary>
            <returns>返回一个套接字(Socket)</returns>
        </member>
        <member name="M:Masuit.Tools.Net.SocketClient.ListenerStream(System.Net.Sockets.TcpListener)">
            <summary>
            服务器侦听方法 返回null则说明没有链接上
            </summary>
            <param name="listener">TCP监听对象</param>
            <returns>返回一个网络流</returns>
        </member>
        <member name="M:Masuit.Tools.Net.SocketClient.ConnectSocket(System.Net.Sockets.TcpClient,System.Net.IPEndPoint)">
            <summary>
            从客户端连接获取socket对象
            </summary>
            <param name="tcpclient">TCP客户端</param>
            <param name="ipendpoint">客户端节点</param>
            <returns>客户端socket</returns>
        </member>
        <member name="M:Masuit.Tools.Net.SocketClient.ConnectSocket(System.Net.Sockets.TcpClient,System.Net.IPAddress,System.Int32)">
            <summary>
            从客户端连接获取socket对象
            </summary>
            <param name="tcpclient">TCP客户端</param>
            <param name="ipadd">IP地址</param>
            <param name="port">端口号</param>
            <returns>客户端socket</returns>
        </member>
        <member name="M:Masuit.Tools.Net.SocketClient.ConnectStream(System.Net.Sockets.TcpClient,System.Net.IPEndPoint)">
            <summary>
            从客户端获取网络流对象
            </summary>
            <param name="tcpclient">TCP客户端</param>
            <param name="ipendpoint">客户端节点</param>
            <returns>客户端的网络流</returns>
        </member>
        <member name="M:Masuit.Tools.Net.SocketClient.ConnectStream(System.Net.Sockets.TcpClient,System.Net.IPAddress,System.Int32)">
            <summary>
            从客户端获取网络流对象
            </summary>
            <param name="tcpclient">TCP客户端</param>
            <param name="ipadd">IP地址</param>
            <param name="port">端口号</param>
            <returns>客户端网络流对象</returns>
        </member>
        <member name="M:Masuit.Tools.Net.SocketClient.ReceiveFixData(System.Net.Sockets.Socket,System.Int32)">
            <summary>
            接受固定长度字符串
            </summary>
            <param name="socket">socket对象</param>
            <param name="size">字符串长度</param>
            <returns>字节数据</returns>
        </member>
        <member name="M:Masuit.Tools.Net.SocketClient.ReceiveVarData(System.Net.Sockets.Socket)">
            <summary>
            接收变长字符串
            为了处理粘包问题 ,每次发送数据时 包头(数据字节长度) + 正文
            这个发送小数据
            设置包头的字节为8,不能超过8位数的字节数组
            </summary>
            <param name="socket">客户端socket</param>
            <returns>byte[]数组</returns>
        </member>
        <member name="M:Masuit.Tools.Net.SocketClient.ReceiveVarData``1(System.Net.Sockets.Socket)">
            <summary>
            接收T类对象,反序列化
            </summary>
            <typeparam name="T">接收T类对象,T类必须是一个可序列化类</typeparam>
            <param name="socket">客户端socket</param>
            <returns>强类型对象</returns>
        </member>
        <member name="M:Masuit.Tools.Net.SocketClient.ReceiveFile(System.Net.Sockets.Socket,System.String,System.String,System.Int64,System.Action{System.Int32})">
            <summary>
            在预先得到文件的文件名和大小
            调用此方法接收文件
            </summary>
            <param name="socket">socket服务端</param>
            <param name="path">路径必须存在</param>
            <param name="filename">文件名</param>
            <param name="size">预先知道的文件大小</param>
            <param name="progress">处理过程</param>
        </member>
        <member name="M:Masuit.Tools.Net.SocketClient.ReceiveFile(System.Net.Sockets.Socket,System.String,System.String,System.Int64)">
            <summary>
            从socket服务端接收文件
            </summary>
            <param name="socket">socket服务端</param>
            <param name="path">文件保存路径(必须存在)</param>
            <param name="filename">文件名</param>
            <param name="size">预先知道的文件大小</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:Masuit.Tools.Net.SocketClient.ReceiveFile(System.Net.Sockets.Socket,System.String)">
            <summary>
            预先不知道文件名和文件大小 用此方法接收
            此方法对于的发送方法是SendFile()
            </summary>
            <param name="socket">socket服务端</param>
            <param name="path">要保存的目录</param>
        </member>
        <member name="M:Masuit.Tools.Net.SocketClient.GetPath(System.String,System.String)">
            <summary>
            得到文件路径(防止有文件名重复)
             如:aaa.txt已经在directory目录下存在,则会得到文件aaa(1).txt
            </summary>
            <param name="directory">目录名</param>
            <param name="file">文件名</param>
            <returns>文件路径</returns>
        </member>
        <member name="M:Masuit.Tools.Net.SocketClient.SendFixData(System.Net.Sockets.Socket,System.Byte[])">
            <summary>
            发送固定长度消息
            发送字节数不能大于int型最大值
            </summary>
            <param name="socket">源socket</param>
            <param name="msg">消息的字节数组</param>
            <returns>返回发送字节个数</returns>
        </member>
        <member name="M:Masuit.Tools.Net.SocketClient.SendVarData(System.Net.Sockets.Socket,System.String)">
            <summary>
            发送变长信息 格式 包头(包头占8位) + 正文
            </summary>
            <param name="socket">发送方socket对象</param>
            <param name="contact">发送文本</param>
            <returns>发送的数据内容长度</returns>
        </member>
        <member name="M:Masuit.Tools.Net.SocketClient.SendVarData(System.Net.Sockets.Socket,System.Byte[])">
            <summary>
            发送变成信息
            </summary>
            <param name="socket">发送方socket对象</param>
            <param name="bytes">消息的 字节数组</param>
            <returns>消息长度</returns>
        </member>
        <member name="M:Masuit.Tools.Net.SocketClient.SendSerializeObject``1(System.Net.Sockets.Socket,``0)">
            <summary>
            发送T类型对象,序列化
            </summary>
            <typeparam name="T">T类型</typeparam>
            <param name="socket">发送方的socket对象</param>
            <param name="obj">T类型对象,必须是可序列化的</param>
            <returns>消息长度</returns>
        </member>
        <member name="M:Masuit.Tools.Net.SocketClient.SendFile(System.Net.Sockets.Socket,System.String,System.Boolean,System.Action{System.Int32})">
            <summary>
            发送文件
            </summary>
            <param name="socket">socket对象</param>
            <param name="path">文件路径</param>
            <param name="issend">是否发送文件(头)信息,如果当前知道文件[大小,名称]则为false</param>
            <param name="progress">处理过程</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:Masuit.Tools.Net.SocketClient.SendFile(System.Net.Sockets.Socket,System.String,System.Boolean)">
            <summary>
            发送文件,不需要进度信息
            </summary>
            <param name="socket">socket对象</param>
            <param name="path">文件路径</param>
            <param name="issend">是否发生(头)信息</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:Masuit.Tools.Net.SocketClient.SendFile(System.Net.Sockets.Socket,System.String)">
            <summary>
            发送文件,不需要进度信息和(头)信息
            </summary>
            <param name="socket">socket对象</param>
            <param name="path">文件路径</param>
            <returns>处理结果</returns>
        </member>
        <member name="T:Masuit.Tools.Reflection.ClassHelper">
            <summary>  
            类帮助器,可以动态对类,类成员进行控制(添加,删除),目前只支持属性控制。  
            注意,属性以外的其它成员会被清空,功能还有待完善,使其不影响其它成员。  
            </summary>  
        </member>
        <member name="M:Masuit.Tools.Reflection.ClassHelper.CreateInstance(System.Type)">
            <summary>  
            根据类的类型型创建类实例。  
            </summary>  
            <param name="t">将要创建的类型。</param>  
            <returns>返回创建的类实例。</returns>  
        </member>
        <member name="M:Masuit.Tools.Reflection.ClassHelper.CreateInstance(System.String,System.Collections.Generic.List{Masuit.Tools.Reflection.ClassHelper.CustPropertyInfo})">
            <summary>  
            根据类的名称,属性列表创建型实例。  
            </summary>  
            <param name="className">将要创建的类的名称。</param>  
            <param name="lcpi">将要创建的类的属性列表。</param>  
            <returns>返回创建的类实例</returns>  
        </member>
        <member name="M:Masuit.Tools.Reflection.ClassHelper.CreateInstance(System.Collections.Generic.List{Masuit.Tools.Reflection.ClassHelper.CustPropertyInfo})">
            <summary>  
            根据属性列表创建类的实例,默认类名为DefaultClass,由于生成的类不是强类型,所以类名可以忽略。  
            </summary>  
            <param name="lcpi">将要创建的类的属性列表</param>  
            <returns>返回创建的类的实例。</returns>  
        </member>
        <member name="M:Masuit.Tools.Reflection.ClassHelper.BuildType">
            <summary>  
            创建一个没有成员的类型的实例,类名为"DefaultClass"。  
            </summary>  
            <returns>返回创建的类型的实例。</returns>  
        </member>
        <member name="M:Masuit.Tools.Reflection.ClassHelper.BuildType(System.String)">
            <summary>  
            根据类名创建一个没有成员的类型的实例。  
            </summary>  
            <param name="className">将要创建的类型的实例的类名。</param>  
            <returns>返回创建的类型的实例。</returns>  
        </member>
        <member name="M:Masuit.Tools.Reflection.ClassHelper.AddProperty(System.Type,System.Collections.Generic.List{Masuit.Tools.Reflection.ClassHelper.CustPropertyInfo})">
            <summary>  
            添加属性到类型的实例,注意:该操作会将其它成员清除掉,其功能有待完善。  
            </summary>  
            <param name="classType">指定类型的实例。</param>  
            <param name="lcpi">表示属性的一个列表。</param>  
            <returns>返回处理过的类型的实例。</returns>  
        </member>
        <member name="M:Masuit.Tools.Reflection.ClassHelper.AddProperty(System.Type,Masuit.Tools.Reflection.ClassHelper.CustPropertyInfo)">
            <summary>  
            添加属性到类型的实例,注意:该操作会将其它成员清除掉,其功能有待完善。  
            </summary>  
            <param name="classType">指定类型的实例。</param>  
            <param name="cpi">表示一个属性。</param>  
            <returns>返回处理过的类型的实例。</returns>  
        </member>
        <member name="M:Masuit.Tools.Reflection.ClassHelper.AddProperty(System.Object,System.Collections.Generic.List{Masuit.Tools.Reflection.ClassHelper.CustPropertyInfo})">
            <summary>
            给对象实例添加新属性并返回新对象实例
            </summary>
            <param name="obj"></param>
            <param name="lcpi">自定义属性对象集合</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Reflection.ClassHelper.AddProperty(System.Object,Masuit.Tools.Reflection.ClassHelper.CustPropertyInfo)">
            <summary>
            给对象实例添加新属性并返回新对象实例
            </summary>
            <param name="obj"></param>
            <param name="cpi">自定义属性对象</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Reflection.ClassHelper.AddProperty(System.Object,System.String,System.Object)">
            <summary>
            给对象实例添加新属性并返回新对象实例
            </summary>
            <param name="obj"></param>
            <param name="propertyName">属性名</param>
            <param name="propertyValue">属性值</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Reflection.ClassHelper.DeleteProperty(System.Type,System.String)">
            <summary>  
            从类型的实例中移除属性,注意:该操作会将其它成员清除掉,其功能有待完善。  
            </summary>  
            <param name="classType">指定类型的实例。</param>  
            <param name="propertyName">要移除的属性。</param>  
            <returns>返回处理过的类型的实例。</returns>  
        </member>
        <member name="M:Masuit.Tools.Reflection.ClassHelper.DeleteProperty(System.Type,System.Collections.Generic.List{System.String})">
            <summary>  
            从类型的实例中移除属性,注意:该操作会将其它成员清除掉,其功能有待完善。  
            </summary>  
            <param name="classType">指定类型的实例。</param>  
            <param name="propertyNames">要移除的属性列表。</param>  
            <returns>返回处理过的类型的实例。</returns>  
        </member>
        <member name="M:Masuit.Tools.Reflection.ClassHelper.DeleteProperty(System.Object,System.Collections.Generic.List{System.String})">
            <summary>
            删除对象的属性并返回新对象实例
            </summary>
            <param name="obj"></param>
            <param name="propertyNames">属性名集合</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Reflection.ClassHelper.DeleteProperty(System.Object,System.String)">
            <summary>
            删除对象的属性并返回新对象实例
            </summary>
            <param name="obj"></param>
            <param name="property">属性名</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Reflection.ClassHelper.MergeProperty(System.Type,System.Collections.Generic.List{Masuit.Tools.Reflection.ClassHelper.CustPropertyInfo})">
            <summary>  
            把类型的实例t和lcpi参数里的属性进行合并。  
            </summary>  
            <param name="t">实例t</param>  
            <param name="lcpi">里面包含属性列表的信息。</param>  
        </member>
        <member name="M:Masuit.Tools.Reflection.ClassHelper.SeparateProperty(System.Type,System.Collections.Generic.List{System.String})">
            <summary>  
            从类型的实例t的属性移除属性列表lcpi,返回的新属性列表在lcpi中。  
            </summary>  
            <param name="t">类型的实例t。</param>  
            <param name="ls">要移除的属性列表。</param>  
        </member>
        <member name="M:Masuit.Tools.Reflection.ClassHelper.AddPropertyToTypeBuilder(System.Reflection.Emit.TypeBuilder,System.Collections.Generic.List{Masuit.Tools.Reflection.ClassHelper.CustPropertyInfo})">
            <summary>  
            把lcpi参数里的属性加入到myTypeBuilder中。注意:该操作会将其它成员清除掉,其功能有待完善。  
            </summary>  
            <param name="myTypeBuilder">类型构造器的实例。</param>  
            <param name="lcpi">里面包含属性列表的信息。</param>  
        </member>
        <member name="M:Masuit.Tools.Reflection.ClassHelper.AddPropertyToType(System.Type,System.Collections.Generic.List{Masuit.Tools.Reflection.ClassHelper.CustPropertyInfo})">
            <summary>  
            把属性加入到类型的实例。  
            </summary>  
            <param name="classType">类型的实例。</param>  
            <param name="lcpi">要加入的属性列表。</param>  
            <returns>返回处理过的类型的实例。</returns>  
        </member>
        <member name="T:Masuit.Tools.Reflection.ClassHelper.CustPropertyInfo">
            <summary>  
            自定义的属性信息类型。  
            </summary>  
        </member>
        <member name="M:Masuit.Tools.Reflection.ClassHelper.CustPropertyInfo.#ctor">
            <summary>  
            空构造。  
            </summary>  
        </member>
        <member name="M:Masuit.Tools.Reflection.ClassHelper.CustPropertyInfo.#ctor(System.Type,System.String)">
            <summary>  
            根据属性类型名称,属性名称构造实例。  
            </summary>  
            <param name="type">属性类型名称。</param>  
            <param name="propertyName">属性名称。</param>  
        </member>
        <member name="M:Masuit.Tools.Reflection.ClassHelper.CustPropertyInfo.#ctor(System.Type,System.String,System.Object)">
            <summary>
            根据属性类型名称,属性名称构造实例，并设置属性值。
            </summary>
            <param name="type"></param>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
        </member>
        <member name="P:Masuit.Tools.Reflection.ClassHelper.CustPropertyInfo.Type">
            <summary>  
            获取或设置属性类型名称。  
            </summary>  
        </member>
        <member name="P:Masuit.Tools.Reflection.ClassHelper.CustPropertyInfo.PropertyName">
            <summary>  
            获取或设置属性名称。  
            </summary>  
        </member>
        <member name="P:Masuit.Tools.Reflection.ClassHelper.CustPropertyInfo.PropertyValue">
            <summary>
            属性值
            </summary>
        </member>
        <member name="P:Masuit.Tools.Reflection.ClassHelper.CustPropertyInfo.FieldName">
            <summary>  
            获取属性字段名称。  
            </summary>  
        </member>
        <member name="P:Masuit.Tools.Reflection.ClassHelper.CustPropertyInfo.SetPropertyMethodName">
            <summary>  
            获取属性在IL中的Set方法名。  
            </summary>  
        </member>
        <member name="P:Masuit.Tools.Reflection.ClassHelper.CustPropertyInfo.GetPropertyMethodName">
            <summary>  
             获取属性在IL中的Get方法名。  
            </summary>  
        </member>
        <member name="T:Masuit.Tools.Reflection.ReflectHelper">
            <summary>
            反射辅助类
            </summary>
        </member>
        <member name="M:Masuit.Tools.Reflection.ReflectHelper.GetInstanceValue(System.Object,System.String)">
            <summary>
            获取实体相关属性的值
            </summary>
            <param name="obj">反射对象</param>
            <param name="propertyName">属性名</param>
            <returns>属性值</returns>
        </member>
        <member name="M:Masuit.Tools.Reflection.ReflectHelper.InvokeMethodOrGetProperty``1(System.Type,System.String,System.Object[],System.Object[])">
            <summary>
            直接调用内部对象的方法/函数或获取属性(支持重载调用)
            </summary>
            <typeparam name="T">泛型T</typeparam>
            <param name="refType">目标数据类型</param>
            <param name="funName">函数名称，区分大小写。</param>
            <param name="objInitial">如果调用属性，则为相关对象的初始化数据，否则为Null。</param>
            <param name="funParams">函数参数信息</param>
            <returns>运行结果</returns>
            <exception cref="T:System.InvalidProgramException">非法异常</exception>
        </member>
        <member name="M:Masuit.Tools.Reflection.ReflectHelper.InvokeFunction``1(System.Type,System.String,System.Object[])">
            <summary>
            调用相关实体类型的函数方法
            </summary>
            <typeparam name="T">泛型T</typeparam>
            <param name="refType">实体类型</param>
            <param name="funName">函数名称</param>
            <param name="funParams">函数参数列表</param>
            <returns>调用该函数之后的结果</returns>
        </member>
        <member name="M:Masuit.Tools.Reflection.ReflectHelper.LoadBitmap(System.Type,System.String,System.String)">
            <summary>
            获取程序集资源的位图资源
            </summary>
            <param name="assemblyType">程序集中的某一对象类型</param>
            <param name="resourceHolder">资源的根名称。例如，名为“MyResource.en-US.resources”的资源文件的根名称为“MyResource”。</param>
            <param name="imageName">资源项名称</param>
        </member>
        <member name="M:Masuit.Tools.Reflection.ReflectHelper.GetStringRes(System.Type,System.String,System.String)">
            <summary>
             获取程序集资源的文本资源
            </summary>
            <param name="assemblyType">程序集中的某一对象类型</param>
            <param name="resName">资源项名称</param>
            <param name="resourceHolder">资源的根名称。例如，名为“MyResource.en-US.resources”的资源文件的根名称为“MyResource”。</param>
        </member>
        <member name="M:Masuit.Tools.Reflection.ReflectHelper.GetManifestString(System.Type,System.String,System.String)">
            <summary>
            获取程序集嵌入资源的文本形式
            </summary>
            <param name="assemblyType">程序集中的某一对象类型</param>
            <param name="charset">字符集编码</param>
            <param name="resName">嵌入资源相对路径</param>
            <returns>如没找到该资源则返回空字符</returns>
        </member>
        <member name="T:Masuit.Tools.Reflection.ReflectionUtil">
            <summary>
            反射操作辅助类，如获取或设置字段、属性的值等反射信息。
            </summary>
        </member>
        <member name="M:Masuit.Tools.Reflection.ReflectionUtil.InvokeMethod``1(System.Object,System.String,System.Object[])">
            <summary>
            执行方法
            </summary>
            <param name="obj">反射对象</param>
            <param name="methodName">方法名，区分大小写</param>
            <param name="args">方法参数</param>
            <typeparam name="T">约束返回的T必须是引用类型</typeparam>
            <returns>T类型</returns>
        </member>
        <member name="M:Masuit.Tools.Reflection.ReflectionUtil.SetField(System.Object,System.String,System.Object)">
            <summary>
            设置字段
            </summary>
            <param name="obj">反射对象</param>
            <param name="name">字段名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Masuit.Tools.Reflection.ReflectionUtil.GetField``1(System.Object,System.String)">
            <summary>
            获取字段
            </summary>
            <param name="obj">反射对象</param>
            <param name="name">字段名</param>
            <typeparam name="T">约束返回的T必须是引用类型</typeparam>
            <returns>T类型</returns>
        </member>
        <member name="M:Masuit.Tools.Reflection.ReflectionUtil.GetFields(System.Object)">
            <summary>
            获取所有的字段信息
            </summary>
            <param name="obj">反射对象</param>
            <returns>字段信息</returns>
        </member>
        <member name="M:Masuit.Tools.Reflection.ReflectionUtil.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            设置属性
            </summary>
            <param name="obj">反射对象</param>
            <param name="name">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Masuit.Tools.Reflection.ReflectionUtil.GetProperty``1(System.Object,System.String)">
            <summary>
            获取属性
            </summary>
            <param name="obj">反射对象</param>
            <param name="name">属性名</param>
            <typeparam name="T">约束返回的T必须是引用类型</typeparam>
            <returns>T类型</returns>
        </member>
        <member name="M:Masuit.Tools.Reflection.ReflectionUtil.GetProperties(System.Object)">
            <summary>
            获取所有的属性信息
            </summary>
            <param name="obj">反射对象</param>
            <returns>属性信息</returns>
        </member>
        <member name="M:Masuit.Tools.Reflection.ReflectionUtil.GetDescription(System.Enum)">
            <overloads>
            	Get The Member Description using Description Attribute.
            </overloads>
            <summary>
            Get The Enum Field Description using Description Attribute.
            </summary>
            <param name="value">The value.</param>
            <returns>return description or value.ToString()</returns>
        </member>
        <member name="M:Masuit.Tools.Reflection.ReflectionUtil.GetDescription(System.Enum,System.Object[])">
            <summary>
            Get The Enum Field Description using Description Attribute and 
            objects to format the Description.
            </summary>
            <param name="value">Enum For Which description is required.</param>
            <param name="args">An Object array containing zero or more objects to format.</param>
            <returns>return null if DescriptionAttribute is not found or return type description</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/>"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Masuit.Tools.Reflection.ReflectionUtil.GetDescription(System.Reflection.MemberInfo)">
            <summary>
            Get The Type Description using Description Attribute.
            </summary>
            <param name="member">Specified Member for which Info is Required</param>
            <returns>return null if DescriptionAttribute is not found or return type description</returns>
        </member>
        <member name="M:Masuit.Tools.Reflection.ReflectionUtil.GetDescription(System.Reflection.MemberInfo,System.Object[])">
            <summary>
            Get The Type Description using Description Attribute and 
            objects to format the Description.
            </summary>
            <param name="member"> Specified Member for which Info is Required</param>
            <param name="args">An Object array containing zero or more objects to format.</param>
            <returns>return <see cref="F:System.String.Empty"/> if DescriptionAttribute is 
            not found or return type description</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="member"/>"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Masuit.Tools.Reflection.ReflectionUtil.GetAttribute(System.Type,System.Reflection.Assembly)">
            <overloads>
            Gets the specified object attributes
            </overloads>
            <summary>
            Gets the specified object attributes for assembly as specified by type
            </summary>
            <param name="attributeType">The attribute Type for which the custom attributes are to be returned.</param>
            <param name="assembly">the assembly in which the specified attribute is defined</param>
            <returns>Attribute as Object or null if not found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="attributeType"/>"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Masuit.Tools.Reflection.ReflectionUtil.GetAttribute(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Gets the specified object attributes for type as specified by type
            </summary>
            <param name="attributeType">The attribute Type for which the custom attributes are to be returned.</param>
            <param name="type">the type on which the specified attribute is defined</param>
            <returns>Attribute as Object or null if not found.</returns>
        </member>
        <member name="M:Masuit.Tools.Reflection.ReflectionUtil.GetAttribute(System.Type,System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets the specified object attributes for type as specified by type with option to serach parent
            </summary>
            <param name="attributeType">The attribute Type for which the custom attributes are to be returned.</param>
            <param name="type">the type on which the specified attribute is defined</param>
            <param name="searchParent">if set to <see langword="true"/> [search parent].</param>
            <returns>
            Attribute as Object or null if not found.
            </returns>
        </member>
        <member name="M:Masuit.Tools.Reflection.ReflectionUtil.GetAttributes(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Gets the collection of all specified object attributes for type as specified by type
            </summary>
            <param name="attributeType">The attribute Type for which the custom attributes are to be returned.</param>
            <param name="type">the type on which the specified attribute is defined</param>
            <returns>Attribute as Object or null if not found.</returns>
        </member>
        <member name="M:Masuit.Tools.Reflection.ReflectionUtil.GetAttributes(System.Type,System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets the collection of all specified object attributes for type as specified by type with option to serach parent
            </summary>
            <param name="attributeType">The attribute Type for which the custom attributes are to be returned.</param>
            <param name="type">the type on which the specified attribute is defined</param>
            <param name="searchParent">The attribute Type for which the custom attribute is to be returned.</param>
            <returns>
            Attribute as Object or null if not found.
            </returns>
        </member>
        <member name="M:Masuit.Tools.Reflection.ReflectionUtil.GetImageResource(System.Reflection.Assembly,System.String)">
            <summary>
            根据资源名称获取图片资源流
            </summary>
            <param name="_"></param>
            <param name="resourceName">资源的名称</param>
            <returns>数据流</returns>
        </member>
        <member name="M:Masuit.Tools.Reflection.ReflectionUtil.LoadBitmap(System.Type,System.String,System.String)">
            <summary>
            获取程序集资源的位图资源
            </summary>
            <param name="assemblyType">程序集中的某一对象类型</param>
            <param name="resourceHolder">资源的根名称。例如，名为“MyResource.en-US.resources”的资源文件的根名称为“MyResource”。</param>
            <param name="imageName">资源项名称</param>
        </member>
        <member name="M:Masuit.Tools.Reflection.ReflectionUtil.GetStringRes(System.Type,System.String,System.String)">
            <summary>
             获取程序集资源的文本资源
            </summary>
            <param name="assemblyType">程序集中的某一对象类型</param>
            <param name="resName">资源项名称</param>
            <param name="resourceHolder">资源的根名称。例如，名为“MyResource.en-US.resources”的资源文件的根名称为“MyResource”。</param>
        </member>
        <member name="M:Masuit.Tools.Reflection.ReflectionUtil.GetManifestString(System.Type,System.String,System.String)">
            <summary>
            获取程序集嵌入资源的文本形式
            </summary>
            <param name="assemblyType">程序集中的某一对象类型</param>
            <param name="charset">字符集编码</param>
            <param name="resName">嵌入资源相对路径</param>
            <returns>如没找到该资源则返回空字符</returns>
        </member>
        <member name="M:Masuit.Tools.Reflection.ReflectionUtil.CreateInstance``1(System.String)">
            <summary>
            创建对应实例
            </summary>
            <param name="type">类型</param>
            <returns>对应实例</returns>
        </member>
        <member name="M:Masuit.Tools.Reflection.ReflectionUtil.CreateInstance``1(System.Type)">
            <summary>
            创建对应实例
            </summary>
            <param name="type">类型</param>
            <returns>对应实例</returns>
        </member>
        <member name="T:Masuit.Tools.Security.Encrypt">
            <summary>
            常用的加密解密算法
            </summary>
        </member>
        <member name="F:Masuit.Tools.Security.Encrypt.DefaultEncryptKey">
            <summary>
            加密密钥，需要在config配置文件中AppSettings节点中配置desSecret值，若未配置，默认取“masuit”的MD5值
            </summary>
        </member>
        <member name="M:Masuit.Tools.Security.Encrypt.DesEncrypt(System.String)">
            <summary>
            使用默认加密
            </summary>
            <param name="strText">被加密的字符串</param>
            <returns>加密后的数据</returns>
        </member>
        <member name="M:Masuit.Tools.Security.Encrypt.DesDecrypt(System.String)">
            <summary>
            使用默认解密
            </summary>
            <param name="strText">需要解密的 字符串</param>
            <returns>解密后的数据</returns>
        </member>
        <member name="M:Masuit.Tools.Security.Encrypt.DesEncrypt(System.String,System.String)">
            <summary> 
            解密字符串
            加密密钥必须为8位
            </summary> 
            <param name="strText">被解密的字符串</param> 
            <param name="strEncrKey">密钥</param> 
            <returns>解密后的数据</returns> 
        </member>
        <member name="M:Masuit.Tools.Security.Encrypt.DesEncrypt(System.IO.FileStream,System.String,System.String)">
            <summary>
            DES加密文件
            </summary>
            <param name="fin">文件输入流</param>
            <param name="outFilePath">文件输出路径</param>
            <param name="strEncrKey">加密密钥</param>
        </member>
        <member name="M:Masuit.Tools.Security.Encrypt.DesDecrypt(System.IO.FileStream,System.String,System.String)">
            <summary>
            DES解密文件
            </summary>
            <param name="fin">输入文件流</param>
            <param name="outFilePath">文件输出路径</param>
            <param name="sDecrKey">解密密钥</param>
        </member>
        <member name="M:Masuit.Tools.Security.Encrypt.DesDecrypt(System.String,System.String)">
            <summary>
                DES解密算法
                密钥为8位
            </summary>
            <param name="pToDecrypt">需要解密的字符串</param>
            <param name="sKey">密钥</param>
            <returns>解密后的数据</returns>
        </member>
        <member name="M:Masuit.Tools.Security.Encrypt.AESEncrypt(System.String)">
            <summary>
            对称加密算法AES RijndaelManaged加密(RijndaelManaged（AES）算法是块式加密算法)
            </summary>
            <param name="encryptString">待加密字符串</param>
            <returns>加密结果字符串</returns>
        </member>
        <member name="M:Masuit.Tools.Security.Encrypt.AESEncrypt(System.String,System.String)">
            <summary>
            对称加密算法AES RijndaelManaged加密(RijndaelManaged（AES）算法是块式加密算法)
            </summary>
            <param name="encryptString">待加密字符串</param>
            <param name="encryptKey">加密密钥，须半角字符</param>
            <returns>加密结果字符串</returns>
        </member>
        <member name="M:Masuit.Tools.Security.Encrypt.AESDecrypt(System.String)">
            <summary>
            对称加密算法AES RijndaelManaged解密字符串
            </summary>
            <param name="decryptString">待解密的字符串</param>
            <returns>解密成功返回解密后的字符串,失败返源串</returns>
        </member>
        <member name="M:Masuit.Tools.Security.Encrypt.AESDecrypt(System.String,System.String)">
            <summary>
            对称加密算法AES RijndaelManaged解密字符串
            </summary>
            <param name="decryptString">待解密的字符串</param>
            <param name="decryptKey">解密密钥,和加密密钥相同</param>
            <returns>解密成功返回解密后的字符串,失败返回空</returns>
        </member>
        <member name="M:Masuit.Tools.Security.Encrypt.GetSubString(System.String,System.Int32,System.String)">
            <summary>
            按字节长度(按字节,一个汉字为2个字节)取得某字符串的一部分
            </summary>
            <param name="sourceString">源字符串</param>
            <param name="length">所取字符串字节长度</param>
            <param name="tailString">附加字符串(当字符串不够长时，尾部所添加的字符串，一般为"...")</param>
            <returns>某字符串的一部分</returns>
        </member>
        <member name="M:Masuit.Tools.Security.Encrypt.GetSubString(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            按字节长度(按字节,一个汉字为2个字节)取得某字符串的一部分
            </summary>
            <param name="sourceString">源字符串</param>
            <param name="startIndex">索引位置，以0开始</param>
            <param name="length">所取字符串字节长度</param>
            <param name="tailString">附加字符串(当字符串不够长时，尾部所添加的字符串，一般为"...")</param>
            <returns>某字符串的一部分</returns>
        </member>
        <member name="M:Masuit.Tools.Security.Encrypt.AESEncryptStrream(System.IO.FileStream,System.String)">
            <summary>
            加密文件流
            </summary>
            <param name="fs">需要加密的文件流</param>
            <param name="decryptKey">加密密钥</param>
            <returns>加密流</returns>
        </member>
        <member name="M:Masuit.Tools.Security.Encrypt.AESDecryptStream(System.IO.FileStream,System.String)">
            <summary>
            解密文件流
            </summary>
            <param name="fs">需要解密的文件流</param>
            <param name="decryptKey">解密密钥</param>
            <returns>加密流</returns>
        </member>
        <member name="M:Masuit.Tools.Security.Encrypt.AESEncryptFile(System.IO.FileStream,System.String)">
            <summary>
            对指定文件AES加密
            </summary>
            <param name="input">源文件流</param>
            <param name="outputPath">输出文件路径</param>
        </member>
        <member name="M:Masuit.Tools.Security.Encrypt.AESDecryptFile(System.IO.FileStream,System.String)">
            <summary>
            对指定的文件AES解密
            </summary>
            <param name="input">源文件流</param>
            <param name="outputPath">输出文件路径</param>
        </member>
        <member name="M:Masuit.Tools.Security.Encrypt.Base64Encrypt(System.String)">
            <summary>
            Base64加密
            </summary>
            <param name="str">需要加密的字符串</param>
            <returns>加密后的数据</returns>
        </member>
        <member name="M:Masuit.Tools.Security.Encrypt.Base64Decrypt(System.String)">
            <summary>
            Base64解密
            </summary>
            <param name="str">需要解密的字符串</param>
            <returns>解密后的数据</returns>
        </member>
        <member name="M:Masuit.Tools.Security.Encrypt.MD5Encrypt(System.String)">
            <summary> 
            MD5加密
            </summary> 
            <param name="strText">原数据</param> 
            <returns>MD5字符串</returns> 
        </member>
        <member name="M:Masuit.Tools.Security.Encrypt.SHA256(System.String)">
            <summary>
            SHA256函数
            </summary>
            <param name="str">原始字符串</param>
            <returns>SHA256结果(返回长度为44字节的字符串)</returns>
        </member>
        <member name="M:Masuit.Tools.Security.Encrypt.GenerateKey">
            <summary>
                创建Key
            </summary>
            <returns>密钥</returns>
        </member>
        <member name="M:Masuit.Tools.Security.Encrypt.MD5Encrypt(System.String,System.String)">
            <summary>
                MD5加密
            </summary>
            <param name="pToEncrypt">加密字符串</param>
            <param name="sKey">密钥Key</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:Masuit.Tools.Security.Encrypt.MD5Decrypt(System.String,System.String)">
            <summary>
                MD5解密
            </summary>
            <param name="pToDecrypt">解密字符串</param>
            <param name="sKey">密钥Key</param>
            <returns>解密后的数据</returns>
        </member>
        <member name="M:Masuit.Tools.Security.Encrypt.MD5Array(System.Byte[])">
            <summary>
                MD5对数组数据加密
            </summary>
            <param name="input">包含需要加密的数据的数组</param>
            <returns>加密后的字节流</returns>
        </member>
        <member name="M:Masuit.Tools.Security.Encrypt.ArrayToHexString(System.Byte[],System.Boolean)">
            <summary>
                获取数组的Hex值
            </summary>
            <param name="array">需要求Hex值的数组</param>
            <param name="uppercase">是否转大写</param>
            <returns>字节数组的16进制表示</returns>
        </member>
        <member name="M:Masuit.Tools.Security.Encrypt.MDString(System.String)">
            <summary>
                对字符串进行MD5加密
            </summary>
            <param name="message">需要加密的字符串</param>
            <returns>加密后的结果</returns>
        </member>
        <member name="M:Masuit.Tools.Security.Encrypt.MDString2(System.String)">
            <summary>
                对字符串进行MD5二次加密
            </summary>
            <param name="message">需要加密的字符串</param>
            <returns>加密后的结果</returns>
        </member>
        <member name="M:Masuit.Tools.Security.Encrypt.MDString3(System.String)">
            <summary>
            MD5 三次加密算法
            </summary>
            <param name="s">需要加密的字符串</param>
            <returns>MD5字符串</returns>
        </member>
        <member name="M:Masuit.Tools.Security.Encrypt.MDString(System.String,System.String)">
            <summary>
                对字符串进行MD5加盐加密
            </summary>
            <param name="message">需要加密的字符串</param>
            <param name="salt">盐</param>
            <returns>加密后的结果</returns>
        </member>
        <member name="M:Masuit.Tools.Security.Encrypt.MDString2(System.String,System.String)">
            <summary>
                对字符串进行MD5二次加盐加密
            </summary>
            <param name="message">需要加密的字符串</param>
            <param name="salt">盐</param>
            <returns>加密后的结果</returns>
        </member>
        <member name="M:Masuit.Tools.Security.Encrypt.MDString3(System.String,System.String)">
            <summary>
            MD5 三次加密算法
            </summary>
            <param name="s">需要加密的字符串</param>
            <param name="salt">盐</param>
            <returns>MD5字符串</returns>
        </member>
        <member name="M:Masuit.Tools.Security.Encrypt.MDFile(System.String)">
            <summary>
            获取文件的MD5值
            </summary>
            <param name="fileName">需要求MD5值的文件的文件名及路径</param>
            <returns>MD5字符串</returns>
        </member>
        <member name="M:Masuit.Tools.Security.Encrypt.MD5Test(System.String)">
            <summary>
                测试MD5加密算法的函数
            </summary>
            <param name="message">需要加密的字符串</param>
            <returns>加密后的 数据</returns>
        </member>
        <member name="M:Masuit.Tools.Security.Encrypt.TestSuite">
            <summary>
                MD5加密算法测试用数据
            </summary>
            <returns> </returns>
        </member>
        <member name="T:Masuit.Tools.Security.RC2">
            <summary>
                RC2加密解密算法
            </summary>
        </member>
        <member name="M:Masuit.Tools.Security.RC2.InitBinFile(System.String)">
            <summary>
                新建一个大小为10261B的文件，以便将加密数据写入固定大小的文件。
            </summary>
            <param name="filePath">文件保存的地址，包含文件名</param>
        </member>
        <member name="M:Masuit.Tools.Security.RC2.EncryptToFile(System.String,System.String,System.Int32)">
            <summary>
                将文本数据加密后写入一个文件，其中，这个文件是用InitBinFile建立的，这个文件将被分成十块，
                用来分别保存10组不同的数据，第一个byte位保留，第2位到第21位分别用来存放每块数据的长度，但
                一个byte的取值为0-127，所以，用两个byte来存放一个长度。
            </summary>
            <param name="toEncryptText">要加密的文本数据</param>
            <param name="filePath">要写入的文件</param>
            <param name="dataIndex">写入第几块，取值为1--10</param>
            <returns>是否操作成功</returns>
        </member>
        <member name="M:Masuit.Tools.Security.RC2.DecryptFromFile(System.String,System.Int32)">
            <summary>
                从一个文件中解密出一段文本，其中，这个文件是由InitBinFile建立的，并且由 EncryptToFile加密的
            </summary>
            <param name="filePath">要解密的文件</param>
            <param name="dataIndex">要从哪一个块中解密</param>
            <returns>解密后的文本</returns>
        </member>
        <member name="M:Masuit.Tools.Security.RC2.EncryptToFile(System.String,System.String)">
            <summary>
                将一段文本加密后保存到一个文件
            </summary>
            <param name="toEncryptText">要加密的文本数据</param>
            <param name="filePath">要保存的文件</param>
            <returns>是否加密成功</returns>
        </member>
        <member name="M:Masuit.Tools.Security.RC2.DecryptFromFile(System.String)">
            <summary>
                将一个被加密的文件解密
            </summary>
            <param name="filePath">要解密的文件</param>
            <returns>解密后的文本</returns>
        </member>
        <member name="M:Masuit.Tools.Security.RC2.EncryptToFile(System.String,System.String,System.Int32,System.Byte[],System.Byte[])">
            <summary>
                将文本数据加密后写入一个文件，其中，这个文件是用InitBinFile建立的，这个文件将被分成十块，
                用来分别保存10组不同的数据，第一个byte位保留，第2位到第21位分别用来存放每块数据的长度，但
                一个byte的取值为0-127，所以，用两个byte来存放一个长度。
            </summary>
            <param name="toEncryptText">要加密的文本数据</param>
            <param name="filePath">要写入的文件</param>
            <param name="dataIndex">写入第几块，取值为1--10</param>
            <param name="IV">初始化向量</param>
            <param name="Key">加密密匙</param>
            <returns>是否操作成功</returns>
        </member>
        <member name="M:Masuit.Tools.Security.RC2.DecryptFromFile(System.String,System.Int32,System.Byte[],System.Byte[])">
            <summary>
                从一个文件中解密出一段文本，其中，这个文件是由InitBinFile建立的，并且由 EncryptToFile加密的
            </summary>
            <param name="filePath">要解密的文件</param>
            <param name="dataIndex">要从哪一个块中解密</param>
            <param name="iv">初始化向量</param>
            <param name="key">解密密匙</param>
            <returns>解密后的文本</returns>
        </member>
        <member name="M:Masuit.Tools.Security.RC2.EncryptToFile(System.String,System.String,System.Byte[],System.Byte[])">
            <summary>
                将一段文本加密后保存到一个文件
            </summary>
            <param name="toEncryptText">要加密的文本数据</param>
            <param name="filePath">要保存的文件</param>
            <param name="iv">初始化向量</param>
            <param name="key">加密密匙</param>
            <returns>是否加密成功</returns>
        </member>
        <member name="M:Masuit.Tools.Security.RC2.DecryptFromFile(System.String,System.Byte[],System.Byte[])">
            <summary>
                将一个被加密的文件解密
            </summary>
            <param name="filePath">要解密的文件</param>
            <param name="iv">初始化向量</param>
            <param name="key">解密密匙</param>
            <returns>解密后的文本</returns>
        </member>
        <member name="M:Masuit.Tools.Security.RC2.SetIV(System.String)">
            <summary>
                设置加密或解密的初始化向量
            </summary>
            <param name="s">长度等于8的ASCII字符集的字符串</param>
        </member>
        <member name="M:Masuit.Tools.Security.RC2.SetKey(System.String)">
            <summary>
                设置加密或解密的密匙
            </summary>
            <param name="s">长度等于16的ASCII字符集的字符串</param>
        </member>
        <member name="T:Masuit.Tools.Security.Rijndael">
            <summary>
                对称加密解密算法类
            </summary>
        </member>
        <member name="M:Masuit.Tools.Security.Rijndael.SymmetricMethod">
            <summary>
                对称加密类的构造函数
            </summary>
        </member>
        <member name="M:Masuit.Tools.Security.Rijndael.GetLegalKey">
            <summary>
                获得密钥
            </summary>
            <returns>密钥</returns>
        </member>
        <member name="M:Masuit.Tools.Security.Rijndael.GetLegalIV">
            <summary>
                获得初始向量IV
            </summary>
            <returns>初试向量IV</returns>
        </member>
        <member name="M:Masuit.Tools.Security.Rijndael.Encrypto(System.String)">
            <summary>
                加密方法
            </summary>
            <param name="source">待加密的串</param>
            <returns>经过加密的串</returns>
        </member>
        <member name="M:Masuit.Tools.Security.Rijndael.Decrypto(System.String)">
            <summary>
                解密方法
            </summary>
            <param name="source">待解密的串</param>
            <returns>经过解密的串</returns>
        </member>
        <member name="T:Masuit.Tools.Security.HashEncode">
            <summary>
            得到随机安全码（哈希加密）。
            </summary>
        </member>
        <member name="M:Masuit.Tools.Security.HashEncode.GetSecurity(System.Random)">
            <summary>
            得到随机哈希加密字符串
            </summary>
            <returns>随机哈希加密字符串</returns>
        </member>
        <member name="M:Masuit.Tools.Security.HashEncode.HashEncoding(System.String)">
            <summary>
            哈希加密一个字符串
            </summary>
            <param name="security">需要加密的字符串</param>
            <returns>加密后的数据</returns>
        </member>
        <member name="T:Masuit.Tools.Security.RsaKey">
            <summary>
            RSA密钥对
            </summary>
        </member>
        <member name="F:Masuit.Tools.Security.RsaKey.PublicKey">
            <summary>
            公钥
            </summary>
        </member>
        <member name="F:Masuit.Tools.Security.RsaKey.PrivateKey">
            <summary>
            私钥
            </summary>
        </member>
        <member name="T:Masuit.Tools.Security.RsaCrypt">
            <summary> 
            RSA加密解密及RSA签名和验证
            </summary> 
        </member>
        <member name="M:Masuit.Tools.Security.RsaCrypt.GenerateRsaKeys">
            <summary>
            生成 RSA 公钥和私钥
            </summary>
        </member>
        <member name="M:Masuit.Tools.Security.RsaCrypt.RSAEncrypt(System.String,System.String)">
            <summary>
            RSA的加密函数 string
            </summary>
            <param name="publicKey">公钥</param>
            <param name="mStrEncryptString">需要加密的字符串</param>
            <returns>加密后的内容</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired. </exception>
        </member>
        <member name="M:Masuit.Tools.Security.RsaCrypt.RSAEncrypt(System.String)">
            <summary>
            RSA的加密函数 string
            </summary>
            <param name="mStrEncryptString">需要加密的字符串</param>
            <returns>加密后的内容</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired. </exception>
        </member>
        <member name="M:Masuit.Tools.Security.RsaCrypt.RSAEncrypt(System.Byte[],System.String)">
            <summary>
            RSA的加密函数 byte[]
            </summary>
            <param name="encryptString">需要加密的字节数组</param>
            <param name="publicKey">公钥</param>
            <returns>加密后的内容</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired. </exception>
        </member>
        <member name="M:Masuit.Tools.Security.RsaCrypt.RSAEncrypt(System.Byte[])">
            <summary>
            RSA的加密函数 byte[]
            </summary>
            <param name="encryptString">需要加密的字节数组</param>
            <returns>加密后的内容</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired. </exception>
        </member>
        <member name="M:Masuit.Tools.Security.RsaCrypt.RSADecrypt(System.String,System.String)">
            <summary>
            RSA的解密函数  string
            </summary>
            <param name="mStrDecryptString">需要解密的字符串</param>
            <param name="privateKey">私钥</param>
            <returns>解密后的内容</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired. </exception>
        </member>
        <member name="M:Masuit.Tools.Security.RsaCrypt.RSADecrypt(System.String)">
            <summary>
            RSA的解密函数  string
            </summary>
            <param name="mStrDecryptString">需要解密的字符串</param>
            <returns>解密后的内容</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired. </exception>
        </member>
        <member name="M:Masuit.Tools.Security.RsaCrypt.RSADecrypt(System.Byte[],System.String)">
            <summary>
            RSA的解密函数  byte
            </summary>
            <param name="decryptString">需要解密的字符串</param>
            <param name="privateKey">私钥</param>
            <returns>解密后的内容</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired. </exception>
        </member>
        <member name="M:Masuit.Tools.Security.RsaCrypt.RSADecrypt(System.Byte[])">
            <summary>
            RSA的解密函数  byte
            </summary>
            <param name="decryptString">需要解密的字符串</param>
            <returns>解密后的内容</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired. </exception>
        </member>
        <member name="M:Masuit.Tools.Security.RsaCrypt.GetHashBytes(System.String)">
            <summary>
            获取Hash描述表
            </summary>
            <param name="mStrSource">源数据</param>
            <returns>Hash描述表</returns>
        </member>
        <member name="M:Masuit.Tools.Security.RsaCrypt.GetHashString(System.String)">
            <summary>
            获取Hash描述表
            </summary>
            <param name="mStrSource">源数据</param>
            <returns>Hash描述表</returns>
        </member>
        <member name="M:Masuit.Tools.Security.RsaCrypt.GetHashBytes(System.IO.FileStream)">
            <summary>
            从文件流获取Hash描述表
            </summary>
            <param name="objFile">源文件</param>
            <returns>Hash描述表</returns>
        </member>
        <member name="M:Masuit.Tools.Security.RsaCrypt.GetHashString(System.IO.FileStream)">
            <summary>
            从文件流获取Hash描述表
            </summary>
            <param name="objFile">源文件</param>
            <returns>Hash描述表</returns>
        </member>
        <member name="M:Masuit.Tools.Security.RsaCrypt.SignatureBytes(System.Byte[],System.String)">
            <summary>
            RSA签名
            </summary>
            <param name="hashbyteSignature">签名字节数据</param>
            <param name="privateKey">私钥</param>
            <returns>处理结果</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired. </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">The key is null.-or- The hash algorithm is null. </exception>
        </member>
        <member name="M:Masuit.Tools.Security.RsaCrypt.SignatureString(System.Byte[],System.String)">
            <summary>
            RSA签名
            </summary>
            <param name="hashbyteSignature">签名字节数据</param>
            <param name="privateKey">私钥</param>
            <returns>处理结果</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired. </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">The key is null.-or- The hash algorithm is null. </exception>
        </member>
        <member name="M:Masuit.Tools.Security.RsaCrypt.SignatureBytes(System.String,System.String)">
            <summary>
            RSA签名
            </summary>
            <param name="mStrHashbyteSignature">签名字符串数据</param>
            <param name="pStrKeyPrivate">私钥</param>
            <returns>处理结果</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired. </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">The key is null.-or- The hash algorithm is null. </exception>
        </member>
        <member name="M:Masuit.Tools.Security.RsaCrypt.SignatureString(System.String,System.String)">
            <summary>
            RSA签名
            </summary>
            <param name="mStrHashbyteSignature">签名字符串数据</param>
            <param name="pStrKeyPrivate">私钥</param>
            <returns>处理结果</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired. </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">The key is null.-or- The hash algorithm is null. </exception>
        </member>
        <member name="M:Masuit.Tools.Security.RsaCrypt.SignatureDeformatter(System.Byte[],System.String,System.Byte[])">
            <summary>
            RSA 签名验证 
            </summary>
            <param name="deformatterData">反格式化字节数据</param>
            <param name="publicKey">公钥</param>
            <param name="hashbyteDeformatter">哈希字节数据</param>
            <returns>处理结果</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired. </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">The key is null.-or- The hash algorithm is null. </exception>
        </member>
        <member name="M:Masuit.Tools.Security.RsaCrypt.SignatureDeformatter(System.Byte[],System.String,System.String)">
            <summary>
            RSA 签名验证 
            </summary>
            <param name="deformatterData">反格式化字节数据</param>
            <param name="publicKey">公钥</param>
            <param name="pStrHashbyteDeformatter">哈希字符串数据</param>
            <returns>处理结果</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired. </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">The key is null.-or- The hash algorithm is null. </exception>
        </member>
        <member name="M:Masuit.Tools.Security.RsaCrypt.SignatureDeformatter(System.String,System.String,System.Byte[])">
            <summary>
            RSA 签名验证
            </summary>
            <param name="pStrDeformatterData">反格式化字符串数据</param>
            <param name="publicKey">公钥</param>
            <param name="hashbyteDeformatter">哈希字节数据</param>
            <returns>处理结果</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired. </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">The key is null.-or- The hash algorithm is null. </exception>
        </member>
        <member name="M:Masuit.Tools.Security.RsaCrypt.SignatureDeformatter(System.String,System.String,System.String)">
            <summary>
            RSA 签名验证
            </summary>
            <param name="pStrDeformatterData">格式字符串数据</param>
            <param name="publicKey">公钥</param>
            <param name="pStrHashbyteDeformatter">哈希字符串数据</param>
            <returns>处理结果</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired. </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">The key is null.-or- The hash algorithm is null. </exception>
        </member>
        <member name="T:Masuit.Tools.Strings.NumberFormater">
            <summary>
            数制格式化器
            </summary>
        </member>
        <member name="P:Masuit.Tools.Strings.NumberFormater.Characters">
            <summary>
            数制表示字符集
            </summary>
        </member>
        <member name="P:Masuit.Tools.Strings.NumberFormater.Length">
            <summary>
            进制长度
            </summary>
        </member>
        <member name="M:Masuit.Tools.Strings.NumberFormater.#ctor">
            <summary>
            数制格式化器
            </summary>
        </member>
        <member name="M:Masuit.Tools.Strings.NumberFormater.#ctor(System.String)">
            <summary>
            数制格式化器
            </summary>
            <param name="characters">进制转换</param>
        </member>
        <member name="M:Masuit.Tools.Strings.NumberFormater.#ctor(System.Int32)">
            <summary>
            数制格式化器
            </summary>
            <param name="bin">进制</param>
        </member>
        <member name="M:Masuit.Tools.Strings.NumberFormater.ToString(System.Int64)">
            <summary>
            数字转换为指定的进制形式字符串
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Strings.NumberFormater.FromString(System.String)">
            <summary>
            指定字符串转换为指定进制的数字形式
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Strings.NumberFormater.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Masuit.Tools.Strings.Template">
            <summary>
            模版引擎
            </summary>
        </member>
        <member name="M:Masuit.Tools.Strings.Template.#ctor(System.String)">
            <summary>
            模版引擎
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Masuit.Tools.Strings.Template.Set(System.String,System.String)">
            <summary>
            设置变量
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Strings.Template.Render">
            <summary>
            渲染模板
            </summary>
            <returns></returns>
        </member>
        <member name="T:Masuit.Tools.Strings.ValidateCode">
            <summary>
            画验证码
            </summary>
        </member>
        <member name="M:Masuit.Tools.Strings.ValidateCode.CreateValidateCode(System.Int32)">
            <summary>
            生成验证码
            </summary>
            <param name="length">指定验证码的长度</param>
            <returns>验证码字符串</returns>
        </member>
        <member name="M:Masuit.Tools.Strings.ValidateCode.CreateValidateGraphic(Microsoft.AspNetCore.Http.HttpContext,System.String,System.Int32,System.Int32)">
            <summary>
            创建验证码的图片
            </summary>
            <param name="validateCode">验证码序列</param>
            <param name="context">当前的HttpContext上下文对象</param>
            <param name="fontSize">字体大小，默认值22px</param>
            <param name="lineHeight">行高，默认36px</param>
            <exception cref="T:System.Exception">The operation failed.</exception>
        </member>
        <member name="T:Masuit.Tools.Systems.ConcurrentLimitedQueue`1">
            <summary>
            定长队列
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Masuit.Tools.Systems.ConcurrentLimitedQueue`1.Limit">
            <summary>
            长度
            </summary>
        </member>
        <member name="M:Masuit.Tools.Systems.ConcurrentLimitedQueue`1.#ctor(System.Int32)">
            <summary>
            定长队列
            </summary>
            <param name="limit"></param>
        </member>
        <member name="M:Masuit.Tools.Systems.ConcurrentLimitedQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            定长队列
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Masuit.Tools.Systems.ConcurrentLimitedQueue`1.Enqueue(`0)">
            <summary>
            入队
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:Masuit.Tools.Systems.Disposable">
            <summary>
            Disposable
            </summary>
        </member>
        <member name="M:Masuit.Tools.Systems.Disposable.Finalize">
            <summary>
            终结器
            </summary>
        </member>
        <member name="M:Masuit.Tools.Systems.Disposable.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Masuit.Tools.Systems.Disposable.Dispose(System.Boolean)">
            <summary>
            释放
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Masuit.Tools.Systems.EnumExt">
            <summary>
            枚举扩展类
            </summary>
        </member>
        <member name="M:Masuit.Tools.Systems.EnumExt.GetDictionary(System.Type)">
            <summary>
            获取枚举对象Key与显示名称的字典
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Systems.EnumExt.GetValueItems(System.Type)">
            <summary>
            获取枚举对象显示名称与Key的字典
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Systems.EnumExt.GetValue(System.Type,System.String)">
            <summary>
            获取枚举对象的值内容
            </summary>
            <param name="enumType"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Systems.EnumExt.GetEnumType(System.Reflection.Assembly,System.String)">
            <summary>
            获取枚举类型
            </summary>
            <param name="assembly"></param>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Systems.EnumExt.GetDescriptionAndValue(System.Type)">
            <summary>
            根据枚举成员获取自定义属性EnumDisplayNameAttribute的属性DisplayName
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Systems.EnumExt.GetDescription(System.Enum)">
            <summary>
            根据枚举成员获取DescriptionAttribute的属性Description
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Systems.EnumExt.GetDisplay(System.Enum)">
            <summary>
            根据枚举成员获取Display的属性Name
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Systems.EnumExt.ToEnumString(System.Int32,System.Type)">
            <summary>  
            扩展方法：根据枚举值得到相应的枚举定义字符串  
            </summary>  
            <param name="value"></param>  
            <param name="enumType"></param>  
            <returns></returns>  
        </member>
        <member name="M:Masuit.Tools.Systems.EnumExt.GetEnumStringFromEnumValue(System.Type)">
            <summary>  
            根据枚举类型得到其所有的 值 与 枚举定义字符串 的集合  
            </summary>  
            <param name="enumType"></param>  
            <returns></returns>  
        </member>
        <member name="T:Masuit.Tools.Systems.HiPerfTimer">
            <summary>
            纳秒级计时器
            </summary>
        </member>
        <member name="M:Masuit.Tools.Systems.HiPerfTimer.#ctor">
            <summary>
            纳秒计数器
            </summary>
        </member>
        <member name="M:Masuit.Tools.Systems.HiPerfTimer.Start">
            <summary>
            开始计时器
            </summary>
        </member>
        <member name="M:Masuit.Tools.Systems.HiPerfTimer.StartNew">
            <summary>
            启动一个新的计时器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Systems.HiPerfTimer.Stop">
            <summary>
            停止计时器
            </summary>
        </member>
        <member name="P:Masuit.Tools.Systems.HiPerfTimer.Duration">
            <summary>
            时器经过时间(单位：秒)
            </summary>
        </member>
        <member name="M:Masuit.Tools.Systems.HiPerfTimer.Execute(System.Action)">
            <summary>
            执行一个方法并测试执行时间
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:Masuit.Tools.Systems.LimitedQueue`1">
            <summary>
            定长队列
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Masuit.Tools.Systems.LimitedQueue`1.Limit">
            <summary>
            队列长度
            </summary>
        </member>
        <member name="M:Masuit.Tools.Systems.LimitedQueue`1.#ctor(System.Int32)">
            <summary>
            定长队列
            </summary>
            <param name="limit"></param>
        </member>
        <member name="M:Masuit.Tools.Systems.LimitedQueue`1.Enqueue(`0)">
            <summary>
            入队
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:Masuit.Tools.Systems.Lock">
            <summary>
            分布式锁
            </summary>
        </member>
        <member name="M:Masuit.Tools.Systems.Lock.#ctor(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue,System.TimeSpan)">
            <summary>
            分布式锁
            </summary>
            <param name="resource"></param>
            <param name="val"></param>
            <param name="validity"></param>
        </member>
        <member name="P:Masuit.Tools.Systems.Lock.Resource">
            <summary>
            
            </summary>
        </member>
        <member name="P:Masuit.Tools.Systems.Lock.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:Masuit.Tools.Systems.Lock.Validity">
            <summary>
            
            </summary>
        </member>
        <member name="T:Masuit.Tools.Systems.RedisLock">
            <summary>
            Redis分布式锁
            </summary>
        </member>
        <member name="M:Masuit.Tools.Systems.RedisLock.Finalize">
            <summary>
            终结器
            </summary>
        </member>
        <member name="F:Masuit.Tools.Systems.RedisLock.LockScript">
            <summary>
            KEYS[1] ：需要加锁的key，这里需要是字符串类型。
            ARGV[1] ：锁的超时时间，防止死锁
            ARGV[2] ：锁的唯一标识
            </summary>
        </member>
        <member name="F:Masuit.Tools.Systems.RedisLock.UnLockScript">
            <summary>
            – KEYS[1] ：需要加锁的key，这里需要是字符串类型。
            – KEYS[2] ：redis消息的ChannelName,一个分布式锁对应唯一的一个channelName:“redisson_lock__channel__{” + getName() + “}”
            – ARGV[1] ：reids消息体，这里只需要一个字节的标记就可以，主要标记redis的key已经解锁，再结合redis的Subscribe，能唤醒其他订阅解锁消息的客户端线程申请锁。
            – ARGV[2] ：锁的超时时间，防止死锁
            – ARGV[3] ：锁的唯一标识
            </summary>
        </member>
        <member name="F:Masuit.Tools.Systems.RedisLock._leaseTimeSpan">
            <summary>
            默认的30秒过期时间
            </summary>
        </member>
        <member name="M:Masuit.Tools.Systems.RedisLock.#ctor(System.String)">
            <summary>
            默认连接127.0.0.1:6379,synctimeout=20000
            </summary>
            <param name="connstr"></param>
        </member>
        <member name="M:Masuit.Tools.Systems.RedisLock.TryLock(StackExchange.Redis.RedisKey,System.TimeSpan,System.TimeSpan,Masuit.Tools.Systems.Lock@)">
            <summary>
            加锁
            </summary>
            <param name="resource">锁名</param>
            <param name="waitTimeSpan">如果没有锁成功,允许动重试申请锁的最大时长</param>
            <param name="leaseTimeSpan">如果锁成功,对于锁(key)的过期时间</param>
            <param name="lockObject">锁成功信息包装成对象返回</param>
            <returns>true:成功</returns>
        </member>
        <member name="M:Masuit.Tools.Systems.RedisLock.UnLock(Masuit.Tools.Systems.Lock)">
            <summary>
            解锁
            </summary>
            <param name="lockObject">锁成功的返回对象</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Systems.RedisLock.CreateUniqueLockId">
            <summary>
            创建唯一锁id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Systems.RedisLock.SetTimeOut(System.Timers.ElapsedEventHandler,System.Int32)">
            <summary>
            设置超时
            </summary>
            <param name="doWork"></param>
            <param name="time"></param>
        </member>
        <member name="M:Masuit.Tools.Systems.RedisLock.TaskTimeOut(System.Func{Masuit.Tools.Systems.Lock,System.Boolean},Masuit.Tools.Systems.Lock,System.Int32)">
            <summary>
            任务超时
            </summary>
            <param name="action"></param>
            <param name="lockObj"></param>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Systems.RedisLock.Dispose">
            <summary>执行与释放或重置非托管资源关联的应用程序定义的任务。</summary>
        </member>
        <member name="M:Masuit.Tools.Systems.RedisLock.Dispose(System.Boolean)">
            <summary>
            释放锁
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Masuit.Tools.Systems.SnowFlake">
            <summary>
            动态生产有规律的分布式ID
            </summary>
        </member>
        <member name="M:Masuit.Tools.Systems.SnowFlake.GetInstance">
            <summary>
            创建一个实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Systems.SnowFlake.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:Masuit.Tools.Systems.SnowFlake.#ctor(System.Int64)">
            <summary>
            构造函数
            </summary>
            <param name="machineId">机器码</param>
        </member>
        <member name="M:Masuit.Tools.Systems.SnowFlake.#ctor(System.Int64,System.Int64)">
            <summary>
            构造函数
            </summary>
            <param name="machineId">机器码</param>
            <param name="datacenterId">数据中心id</param>
        </member>
        <member name="M:Masuit.Tools.Systems.SnowFlake.GetLongId">
            <summary>
            获取长整形的ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Systems.SnowFlake.GetUniqueId">
            <summary>
            获取一个字符串表示形式的id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Systems.SnowFlake.GetUniqueShortId(System.Int32)">
            <summary>
            获取一个字符串表示形式的id
            </summary>
            <param name="maxLength">最大长度，至少6位</param>
            <returns></returns>
        </member>
        <member name="T:Masuit.Tools.Systems.StopwatchExtension">
            <summary>
            stopwatch扩展
            </summary>
        </member>
        <member name="M:Masuit.Tools.Systems.StopwatchExtension.Execute(System.Action)">
            <summary>
            检测方法执行时间
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:Masuit.Tools.Win32.Windows">
            <summary>
            Windows系统的系列方法
            </summary>
        </member>
        <member name="M:Masuit.Tools.Win32.Windows.GetLocalUsedIP">
            <summary>  
            获取当前使用的IP  
            </summary>  
            <returns></returns>  
        </member>
        <member name="M:Masuit.Tools.Win32.Windows.RunApp(System.String,System.String,System.Boolean)">
            <summary>  
            运行一个控制台程序并返回其输出参数。  
            </summary>  
            <param name="filename">程序名</param>  
            <param name="arguments">输入参数</param>
            <param name="recordLog">是否在控制台输出日志</param>
            <returns></returns>  
        </member>
        <member name="T:Masuit.Tools.Win32.WindowsServer">
            <summary>
            服务器信息
            </summary>
        </member>
        <member name="F:Masuit.Tools.Win32.WindowsServer.CpuId">
            <summary>
            CPUID
            </summary>
        </member>
        <member name="F:Masuit.Tools.Win32.WindowsServer.CpuCount">
            <summary>
            CPU插槽数
            </summary>
        </member>
        <member name="F:Masuit.Tools.Win32.WindowsServer.CpuMhz">
            <summary>
            CPU主频
            </summary>
        </member>
        <member name="F:Masuit.Tools.Win32.WindowsServer.MacAddress">
            <summary>
            mac地址
            </summary>
        </member>
        <member name="F:Masuit.Tools.Win32.WindowsServer.DiskId">
            <summary>
            硬盘ID
            </summary>
        </member>
        <member name="F:Masuit.Tools.Win32.WindowsServer.DiskSize">
            <summary>
            硬盘大小
            </summary>
        </member>
        <member name="F:Masuit.Tools.Win32.WindowsServer.IpAddress">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="F:Masuit.Tools.Win32.WindowsServer.LoginUserName">
            <summary>
            系统当前登录用户
            </summary>
        </member>
        <member name="F:Masuit.Tools.Win32.WindowsServer.ComputerName">
            <summary>
            计算机名
            </summary>
        </member>
        <member name="F:Masuit.Tools.Win32.WindowsServer.SystemType">
            <summary>
            操作系统架构
            </summary>
        </member>
        <member name="F:Masuit.Tools.Win32.WindowsServer.TotalPhysicalMemory">
            <summary>
            物理内存，单位MB
            </summary>
        </member>
        <member name="P:Masuit.Tools.Win32.WindowsServer.Instance">
            <summary>
            获取实例
            </summary>
        </member>
        <member name="M:Masuit.Tools.Win32.WindowsServer.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Masuit.Tools.Win32.WindowsServer.GetCpuCount">
            <summary>
            获取CPU个数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Win32.WindowsServer.GetCpuMHZ">
            <summary>
            获取CPU主频
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Win32.WindowsServer.GetSizeOfDisk">
            <summary>
            获取磁盘大小
            </summary>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Win32.WindowsServer.GetUserName">
               <summary>  
              操作系统的登录用户名 
               </summary>  
               <returns>  </returns>  
        </member>
        <member name="T:Masuit.Tools.Win32.WindowsCommand">
            <summary>
            命令提示符
            </summary>
        </member>
        <member name="M:Masuit.Tools.Win32.WindowsCommand.StrictNext(System.Random,System.Int32)">
            <summary>
            生成真正的随机数
            </summary>
            <param name="r"></param>
            <param name="seed"></param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Win32.WindowsCommand.NextGauss(System.Random,System.Double,System.Double)">
            <summary>
            产生正态分布的随机数
            </summary>
            <param name="rand"></param>
            <param name="mean">均值</param>
            <param name="stdDev">方差</param>
            <returns></returns>
        </member>
        <member name="M:Masuit.Tools.Win32.WindowsCommand.Execute(System.String,System.Int32)">
            <summary>
            执行一个控制台程序，并获取在控制台返回的数据
            </summary>
            <param name="dosCommand">dos/cmd命令</param>
            <param name="outtime">等待执行时间毫秒值，默认不等待</param>
            <returns>控制台输出信息</returns>
            <exception cref="T:System.SystemException">尚未设置进程 <see cref="P:System.Diagnostics.Process.Id" />，而且不存在可从其确定 <see cref="P:System.Diagnostics.Process.Id" /> 属性的 <see cref="P:System.Diagnostics.Process.Handle" />。- 或 -没有与此 <see cref="T:System.Diagnostics.Process" /> 对象关联的进程。- 或 -您正尝试为远程计算机上运行的进程调用 <see cref="M:System.Diagnostics.Process.WaitForExit(System.Int32)" />。此方法仅对本地计算机上运行的进程可用。</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">未能访问该等待设置。</exception>
            <exception cref="T:System.Exception">命令参数无效，必须传入一个控制台能被cmd.exe可执行程序; 如：ping 127.0.0.1</exception>
        </member>
    </members>
</doc>
